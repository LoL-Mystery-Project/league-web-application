{"version":3,"sources":["styles/palette.ts","redux/actions/dragonActions.ts","redux/actions/imageActions.ts","redux/actions/monsterActions.ts","redux/actions/pageActions.ts","components/ImageAsset.tsx","components/Navbar.tsx","components/Test.tsx","utils/InfoPopover.tsx","pages/Wiki.tsx","components/hooks/useWindowDimensions.tsx","utils/TextColourizer.tsx","layout/ColouredList.tsx","styles/dimension.ts","layout/InfoHeader.tsx","layout/Footer.tsx","layout/InfoSection.tsx","layout/InfoContainer.tsx","utils/ComponentCatalogue.tsx","pages/Home.tsx","components/SummonerSearchBar.tsx","components/SoulSelectionToggle.tsx","components/SummonersRiftMap.tsx","components/InfoCardComponents (no longer used)/Baron.tsx","monster-layout/MonsterDetails.tsx","monster-layout/ModularMonsterCard.tsx","components/InfoCardPanel.tsx","components/PatchNoteCardPanel.tsx","components/SplashArtCardPanel.tsx","components/InfoCardTabs.tsx","components/InfoDrawer.tsx","components/DonateInfoBox.tsx","pages/SummonersRift.tsx","pages/WatchLive.tsx","pages/Leaderboard.tsx","pages/Stats.tsx","pages/Guides.tsx","components/ImageGallery.tsx","config/featureFlags.ts","Routes.tsx","App.tsx","reportWebVitals.ts","redux/reducers.ts","redux/reducers/pageReducer.ts","redux/reducers/dragonReducer.ts","redux/reducers/imageReducer.ts","redux/reducers/monsterReducer.ts","redux/configureStore.ts","index.tsx"],"names":["mainColour","glowColour","subColour","SET_SELECTED_DRAGON","SET_DRAG_OPTIONS","setSelectedDrag","dragType","dispatch","type","payload","setDragOptions","dragOptions","FETCHING_IMAGES","SET_IMAGES","SET_IMAGE_MAP","FETCHING_IMAGES_FAILED","FETCHING_ALL_MONSTERS","FETCHING_MONSTERS_FAILED","SET_ALL_MONSTERS","SET_SELECTED_MONSTER","CLEAR_SELECTED_MONSTER","setSelectedMonster","name","getState","a","allMonsters","monsters","selectedMonster","find","monster","SET_CURRENT_PAGE","SET_SHOW_INFO_DRAWER","setCurrentPage","page","setInfoDrawerBoolean","isOpen","showInfoDrawer","ImageAsset","props","imageMap","useSelector","state","images","alt","src","Wrapper","styled","div","white","yellow","grey","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","pages","MenuAppBar","useDispatch","pageState","classes","useEffect","isEmpty","window","location","pathname","isSelectedPage","menuItem","currentPage","className","AppBar","position","color","Toolbar","IconButton","aria-label","style","height","Typography","map","index","to","textDecoration","onClick","handleClick","PopoverDimensions","Test","Wiki","useWindowDimensions","useState","width","windowDimensions","setWindowDimensions","addEventListener","updateWindowDimensions","innerHeight","innerWidth","popover","pointerEvents","paper","padding","background","boxShadow","titleText","fontFamily","fontSize","zIndex","marginTop","bannerHeight","marginLeft","textMarginLeft","subtitleText","subtitleFontSize","descriptionText","descriptionFontSize","lineHeight","InfoPopover","popoverObject","mapDatum","open","anchorEl","handlePopoverClose","description","subtitle","image","icon","selectedObject","setSelectedObject","id","subTitle","banner","Popover","anchorOrigin","vertical","horizontal","transformOrigin","onClose","disableRestoreFocus","iconSize","iconMarginLeft","objectFit","bannerMarginLeft","bannerWidth","border","initialTooltipState","Object","freeze","TextColourizer","text","colourMap","children","linkMap","typographyProps","rendered","setRendered","React","setAnchorEl","hoveredObject","setHoveredObject","Boolean","originalText","toString","indexMap","setOfStartingPositions","Set","getColouredJSX","result","key","curr","has","i","length","push","normalPhrase","join","colour","findKey","e","some","x","start","phrase","substring","end","getJsxWithUrls","arr","elemKey","forEach","keys","includes","indexOf","href","url","onMouseEnter","hasTooltip","tooltipData","currentTarget","onMouseLeave","elem","indices","idx","add","display","SummonersRiftConstants","SummonersRiftMapConstants","infoDrawerConstants","infoCardTabsConstants","monsterDetailsConstants","infoSectionConstants","infoHeaderConstants","closeArrowConstants","lineConstants","footerConstants","patchNoteConstants","donateInfoBoxConstants","ColouredListStyles","ColouredList","listItems","divProps","listItem","sublist","paddingLeft","HeaderStyles","effectsDescriptionMarginTop","effectsDescriptionMarginLeft","titleStyleMarginTop","titleStyleMarginLeft","subheaderStyleMarginLeft","subheaderStyleMarginTop","InfoHeader","isSubheader","handleArrowClick","isArrowOpen","setIsArrowOpen","StyledTabs","withStyles","Tabs","indicator","blue","footerText","textTransform","Footer","Grid","indicatorColor","centered","Tab","disableRipple","label","value","enderMarginTop","textAlign","InfoSectionStyles","spanWithIconMarginTop","spanWithoutIconMarginTop","InfoSection","item","container","flexDirection","alignItems","titleColour","abilitiesSubHeaderMarginLeft","colouredListWithIconMarginLeft","colouredListWithoutIconMarginLeft","colouredListMarginTop","effects","InfoContainer","subcategories","subcategory","data","ability","ComponentCatalogue","xs","margin","language","customStyle","borderRadius","vscDarkPlus","wrapLongLines","purple","green","orange","red","Home","overflowY","overflowX","breakpoints","up","search","backgroundColor","searchIcon","justifyContent","inputRoot","inputInput","transition","transitions","create","SummonerSearchBar","InputBase","placeholder","input","inputProps","SoulSelectionToggle","hoverDrag","setHoverDrag","dragState","dragon","selectedDragon","updateSelectedDrag","handleToggleCheckBox","showNeutralMonsters","showJunglePlants","showBuildings","showBrushes","Checkbox","checkedIcon","onChange","SummonersRiftMap","showInfoCard","setShowInfoCard","handleShowInfoCard","newMapData","filter","filterByType","objectType","handleHideInfoCard","closeArrow","right","cursor","MonsterWrapper","statsTitleMarginBottom","statsColumnItemsMarginLeft","MonsterDetails","overview","isPanelOpen","setIsPanelOpen","healthCharacterCount","stats","health","isOverCharLimit","firstColumnSize","thirdColumnSize","secondColumnMarginLeft","thirdColumnMarginLeft","attackDamage","isOverInitialCharLimit","initial","spawnColumnMarginLeft","spawnFirstColumnSize","spawnInitialMarginTop","initialTextMarginBottom","Collapse","in","statsMarginTop","statsMarginLeft","marginBottom","statsMarginBottom","statsColumnMarginLeft","bounty","gold","exp","cs","armor","healthRegen","attackSpeed","magicResist","movSpeed","range","respawn","ModularMonsterCard","openState","setOpenState","informationText","section","InfoCardPanel","versionNumberMarginTop","lineMarginTop","patchCategoryColourMap","PatchNoteCardPanel","patchNotes","patchRelease","release","patchCategory","patchNoteListMarginLeft","patchNoteListMarginTop","maxWidth","list","patchNote","changes","noWrap","SplashArtCardPanel","splashArt","infoCardTabLineMarginTop","infoCardTabLineMarginLeft","splashArtMarginTop","splashArtMarginLeft","tabText","InfoCardTabs","setValue","windowHeight","setWindowHeight","event","newValue","disabled","monsterTitleMarginBottom","monsterIconMarginRight","fullList","drawerStyle","infoCard","closeButton","closeButtonMarginRight","InfoDrawer","handleClose","asset","Fade","navy","DonateInfoBox","Card","assetText","SummonersRift","undefined","maxHeight","justify","flexBasis","neutralMonstersHeaderMarginTop","listMarginTop","alignContent","iconAndTextMarginTop","WatchLive","Leaderboard","Stats","Guides","bgBlack","flex","iconButton","divider","ImageGallery","isDialogOpen","setIsDialogOpen","searchState","setSearchState","imageKey","dialogProps","setDialogProps","imageList","paddingTop","Paper","component","Divider","orientation","target","onKeyDown","preventDefault","flexWrap","GridList","cellHeight","cols","GridListTile","loading","GridListTileBar","setOpen","ImageDialog","dimensions","setDimensions","getMetaData","imageUrl","img","Image","onload","Dialog","PaperProps","black","minWidth","DialogContent","variant","minHeight","rel","prodMode","Routes","exact","path","App","Promise","all","fetch","process","PORT","json","console","error","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","S3","params","Bucket","listObjects","err","Contents","results","Key","reduce","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","fetchingImages","fetchFailed","fetchingMonsters","store","createStore","combineReducers","reducers","composeWithDevTools","applyMiddleware","thunk","createMuiTheme","palette","primary","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b834ce92.chunk.js","sourcesContent":["export enum mainColour {\n  white = \"#ffffff\",\n  grey = \"#808080\",\n  yellow = \"#b67f15\",\n  purple = \"#8717de\",\n  blue = \"#108b94\",\n  green = \"#0d9e35\",\n  red = \"#aa0013\",\n  orange = \"#ff6b00\",\n  black = \"#010a13\",\n  bgBlack = \"#222222\",\n  testBigContainer = \"cornflowerBlue\",\n  testMediumContainer = \"lavender\",\n  testSmallContainer = \"pink\",\n}\n\nexport enum glowColour {\n  white = `linear-gradient(225deg, rgba(255, 255, 255, 0.5) 0%, #ffffff 50.52%, rgba(255, 255, 255, 0.5) 100%)`,\n  yellow = `linear-gradient(25.61deg, rgba(182, 127, 21, 0.5) 1.04%, #b67f15 52.08%, rgba(182, 127, 21, 0.5) 100%)`,\n  purple = `linear-gradient(25.61deg, rgba(135, 23, 222, 0.5) 1.04%, #8717de 52.08%, rgba(135, 23, 222, 0.5) 100%)`,\n  blue = `linear-gradient(225deg, rgba(10, 94, 100, 0.5) 0%, #108b94 49.48%, rgba(10, 94, 100, 0.5) 100%)`,\n  orange = `linear-gradient(225deg, rgba(155, 65, 0, 0.5) 0%, #ff6b00 48.44%, rgba(155, 65, 0, 0.5) 100%)`,\n  backGroundBlue = `linear-gradient(180deg, #010A13 0%, #041722 100%)`,\n}\n\nexport enum subColour {\n  grey = \"#5b5b5b\",\n  yellow = \"#63430f\",\n  blue = \"#0a5e64\",\n  orange = \"#9b4100\",\n  navy = \"#041722\",\n}\n","import { DragonOptions } from \"../ReduxTypes\";\n\nexport const SET_SELECTED_DRAGON = \"@@DRAGON_ACTION/SET_SELECTED_DRAGON\";\nexport const SET_DRAG_OPTIONS = \"@@DRAGON_ACTION/SET_DRAG_OPTIONS\";\n\nexport const setSelectedDrag = (dragType: string) => (dispatch: Function) => {\n  dispatch({ type: SET_SELECTED_DRAGON, payload: dragType });\n};\n\nexport const setDragOptions = (dragOptions: DragonOptions) => (\n  dispatch: Function\n) => {\n  dispatch({ type: SET_DRAG_OPTIONS, payload: dragOptions });\n};\n","import AWS from \"aws-sdk\";\n\nexport const FETCHING_IMAGES = \"@@IMAGES_ACTION/FETCHING_IMAGES\";\nexport const SET_IMAGES = \"@@IMAGES_ACTION/SET_IMAGES\";\nexport const SET_IMAGE_MAP = \"@@IMAGES_ACTION/SET_IMAGE_MAP\";\nexport const FETCHING_IMAGES_FAILED = \"@@IMAGES_ACTION/FETCHING_IMAGES_FAILED\";\n\nexport const fetchImageUrls = () => (dispatch: Function) => {\n  dispatch({ type: FETCHING_IMAGES, payload: true });\n  AWS.config.region = \"us-west-2\"; // Region\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: process.env.REACT_APP_AWS_IDENTITY || \"\",\n  });\n\n  const bucket = new AWS.S3({ params: { Bucket: \"league-icons\" } });\n  bucket.listObjects((err, data) => {\n    if (err) {\n      dispatch({ type: FETCHING_IMAGES_FAILED, payload: err });\n      dispatch({ type: FETCHING_IMAGES, payload: false });\n      console.error(err);\n    } else {\n      if (data.Contents) {\n        const results = data.Contents.map((image) => ({\n          key: image.Key,\n          url: `https://league-icons.s3-us-west-2.amazonaws.com/${image.Key}`,\n        }));\n        const imageMap = results.reduce(\n          (result, curr) => ({\n            ...result,\n            [curr.key!]: curr.url,\n          }),\n          {}\n        );\n        dispatch({ type: SET_IMAGES, payload: results });\n        dispatch({ type: SET_IMAGE_MAP, payload: imageMap });\n        dispatch({ type: FETCHING_IMAGES, payload: false });\n      }\n    }\n  });\n};\n","import { MonsterType } from \"../../monster-layout/MonsterTypes\";\n\nexport const FETCHING_ALL_MONSTERS = \"@@MONSTER_ACTION/FETCHING_ALL_MONSTERS\";\nexport const FETCHING_MONSTERS_FAILED =\n  \"@@MONSTER_ACTION/FETCHING_MONSTERS_FAILED\";\nexport const SET_ALL_MONSTERS = \"@@MONSTER_ACTION/SET_ALL_MONSTERS\";\nexport const SET_SELECTED_MONSTER = \"@@MONSTER_ACTION/SET_SELECTED_MONSTER\";\nexport const CLEAR_SELECTED_MONSTER = \"@@MONSTER_ACTION/CLEAR_SELECTED_MONSTER\";\n\nexport const fetchAllMonsters = () => async (dispatch: Function) => {\n  dispatch({ type: FETCHING_ALL_MONSTERS, payload: true });\n  try {\n    const monsters = await fetch(\n      `http://localhost:${process.env.PORT || 5000}/monsters`\n    );\n    const json = await monsters.json();\n    dispatch({ type: SET_ALL_MONSTERS, payload: json });\n  } catch (err) {\n    console.error(`${FETCHING_MONSTERS_FAILED} failed: ${err}`);\n    dispatch({ type: FETCHING_MONSTERS_FAILED });\n  } finally {\n    dispatch({ type: FETCHING_ALL_MONSTERS, payload: false });\n  }\n};\n\nexport const setSelectedMonster = (name: string) => async (\n  dispatch: Function,\n  getState: Function\n) => {\n  const { allMonsters } = getState().monsters;\n  const selectedMonster = allMonsters.find(\n    (monster: MonsterType) => monster.name === name\n  );\n  dispatch({ type: SET_SELECTED_MONSTER, payload: selectedMonster });\n};\n\nexport const clearSelectedMonster = () => (dispatch: Function) => {\n  dispatch({ type: CLEAR_SELECTED_MONSTER });\n};\n","export const SET_CURRENT_PAGE = \"@@PAGE_ACTION/SET_CURRENT_PAGE\";\nexport const SET_SHOW_INFO_DRAWER = \"@@PAGE_ACTION/SET_SHOW_INFO_DRAWER\";\n\nexport const setCurrentPage = (page: string) => (dispatch: Function) => {\n  dispatch({ type: SET_CURRENT_PAGE, payload: page });\n};\n\nexport const setInfoDrawerBoolean = (isOpen: boolean) => (\n  dispatch: Function,\n  getState: Function\n) => {\n  const { showInfoDrawer } = getState().page;\n\n  dispatch({ type: SET_SHOW_INFO_DRAWER, payload: isOpen });\n};\n","import React, { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\n\ninterface ExtendedImageProps extends React.ComponentProps<\"img\"> {\n  alt: string;\n}\n\nexport type ImageAssetProps = Omit<ExtendedImageProps, \"src\">;\n\nexport const ImageAsset: FC<ImageAssetProps> = (props) => {\n  const { imageMap } = useSelector((state: RootState) => state.images);\n  const { alt } = props;\n  return (\n    <>{imageMap && alt && <img src={imageMap[alt]} {...props} alt={alt} />}</>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { isEmpty } from \"lodash\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { PageState, RootState } from \"../redux/ReduxTypes\";\nimport { setCurrentPage } from \"../redux/actions/pageActions\";\nimport { mainColour } from \"../styles/palette\";\nimport { ImageAsset } from \"./ImageAsset\";\nimport { prodMode } from \"../config/featureFlags\";\n\n// https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nconst Wrapper = styled.div`\n  .navBarButton {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 24px;\n    line-height: 34px;\n    color: #808080;\n    padding: 18px 15px;\n  }\n\n  .navBarButton:hover {\n    color: #ffffff;\n    background: radial-gradient(ellipse at bottom, white 10%, transparent 75%);\n    background-position: center bottom;\n    background-size: 75% 8%;\n    background-repeat: no-repeat;\n  }\n\n  .siteName {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 24px;\n    line-height: 34px;\n    color: #b67f15;\n    padding: 18px 15px;\n  }\n\n  .selectedPage {\n    color: #ffffff;\n    background: linear-gradient(\n      rgba(255, 255, 255, 0.001),\n      ${mainColour.white} 500%\n    );\n  }\n\n  .selectedPage:hover {\n    color: #ffffff;\n    background-image: linear-gradient(\n        rgba(255, 255, 255, 0.001),\n        ${mainColour.white} 500%\n      ),\n      radial-gradient(ellipse at bottom, white 10%, transparent 75%) !important;\n    background-position: center, center bottom;\n    background-size: 100% 100%, 75% 8%;\n    background-repeat: no-repeat, no-repeat;\n  }\n\n  .parentNavBarContainer {\n    display: flex;\n    flex-direction: row;\n    text-align: center;\n  }\n\n  .appBarStyles {\n    background-color: transparent;\n    border-top: 2px solid ${mainColour.yellow};\n    border-bottom: 1px solid ${mainColour.grey};\n  }\n\n  .arrowStyles {\n    position: absolute;\n    top: -1px;\n    margin-left: -15px;\n  }\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst pages = [\n  // [\"/home\", \"Home\"],\n  // [\"/watchlive\", \"Watch Live\"],\n  // [\"/leaderboards\", \"Leaderboards\"],\n  // [\"/Stats\", \"Stats\"],\n  // [\"/Guides\", \"Guides\"],\n  // [\"/wiki\", \"Wiki\"],\n  [\"/summonersrift\", \"Summoner's Rift\"],\n];\n\nexport default function MenuAppBar() {\n  const dispatch = useDispatch();\n  const pageState: PageState = useSelector((state: RootState) => state.page);\n  const classes = useStyles();\n\n  // set current page to \"/\" on initial page load\n  useEffect(() => {\n    if (isEmpty(pageState)) {\n      dispatch(setCurrentPage(window.location.pathname));\n    }\n  }, [pageState, dispatch]);\n\n  const handleClick = (page: Array<string>) => {\n    dispatch(setCurrentPage(page[0]));\n  };\n\n  const isSelectedPage = (menuItem: string) =>\n    pageState.currentPage === menuItem && \"selectedPage\";\n\n  return (\n    <Wrapper>\n      <div className={classes.root}>\n        <AppBar position=\"static\" className=\"appBarStyles\" color=\"transparent\">\n          <Toolbar>\n            {/* TODO: make this the LoL icon */}\n            <IconButton\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <ImageAsset alt=\"lol.svg\" style={{ height: 39 }} />\n              <Typography className=\"siteName\">OneHP</Typography>\n            </IconButton>\n\n            <div className=\"parentNavBarContainer\">\n              {pages.map((page, index) => {\n                return (\n                  <div>\n                    {isSelectedPage(page[0]) && (\n                      <ImageAsset\n                        className=\"arrowStyles\"\n                        height={15}\n                        alt=\"pointer.svg\"\n                      />\n                    )}\n                    <Link\n                      to={page[0]}\n                      style={{\n                        textDecoration: \"none\",\n                        color: \"inherit\",\n                      }}\n                      key={index}\n                      onClick={() => handleClick(page)}\n                    >\n                      <Typography\n                        className={`navBarButton ${isSelectedPage(page[0])}`}\n                      >\n                        {page[1]}\n                      </Typography>\n                    </Link>\n                  </div>\n                );\n              })}\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n    </Wrapper>\n  );\n}\n","import React, { FC } from \"react\";\n\ninterface TestProps {}\n\n// testing webhook\nexport const Test: FC<TestProps> = () => {\n  return (\n    <div>\n      <h1>{`Title page`}</h1>\n    </div>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport {\n  Popover,\n  createStyles,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { LinkMapObject } from \"./TextColourizer\";\nimport { mainColour } from \"../styles/palette\";\nimport { MapType } from \"../components/SummonersRiftMap\";\nimport { Box } from \"@material-ui/core\";\n\ninterface BaseInfoPopoverProps {\n  open: boolean;\n  anchorEl: Element | ((element: Element) => Element) | null | undefined;\n  handlePopoverClose:\n    | ((event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void)\n    | undefined;\n}\n\ninterface PropsWithLinkMap extends BaseInfoPopoverProps {\n  popoverObject: LinkMapObject;\n  mapDatum?: never;\n}\n\ninterface PropsWithMapDatum extends BaseInfoPopoverProps {\n  popoverObject?: never;\n  mapDatum: MapType;\n}\n\ninterface InfoPopoverObject {\n  name: string;\n  description: string;\n  subtitle: string;\n  image: string;\n  icon: string;\n}\n\ntype InfoPopoverProps = PropsWithLinkMap | PropsWithMapDatum;\n\nenum PopoverDimensions {\n  bannerHeight = 200,\n  bannerWidth = 398,\n  marginTop = 20,\n  bannerMarginLeft = 20,\n  textMarginLeft = 40,\n  marginRight = 20,\n  iconMarginLeft = 375,\n  iconSize = 20,\n  headerFontSize = 30,\n  subtitleFontSize = 16,\n  descriptionFontSize = 16,\n  headerHeight = 30,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    popover: {\n      pointerEvents: \"none\",\n    },\n    paper: {\n      padding: theme.spacing(1),\n      background: \"transparent\",\n      boxShadow: \"unset\",\n    },\n    titleText: {\n      fontFamily: \"Friz Quadrata\",\n      fontSize: 30,\n      color: mainColour.white,\n      position: \"absolute\",\n      zIndex: 10,\n      marginTop: PopoverDimensions.bannerHeight + 8,\n      marginLeft: PopoverDimensions.textMarginLeft,\n      marginRight: PopoverDimensions.marginRight,\n    },\n    subtitleText: {\n      fontFamily: \"Friz Quadrata\",\n      fontSize: PopoverDimensions.subtitleFontSize,\n      color: mainColour.grey,\n      position: \"absolute\",\n      zIndex: 1.0,\n      marginTop: 244,\n      marginLeft: PopoverDimensions.textMarginLeft,\n      marginRight: PopoverDimensions.marginRight,\n    },\n    descriptionText: {\n      fontSize: PopoverDimensions.descriptionFontSize,\n      color: mainColour.grey,\n      position: \"absolute\",\n      lineHeight: 1.3,\n      zIndex: 10,\n      marginTop: 275,\n      marginLeft: PopoverDimensions.textMarginLeft,\n      marginRight: PopoverDimensions.marginRight,\n    },\n  })\n);\n\nexport const InfoPopover: FC<InfoPopoverProps> = ({\n  popoverObject,\n  mapDatum,\n  open,\n  anchorEl,\n  handlePopoverClose,\n}) => {\n  const [selectedObject, setSelectedObject] = useState<InfoPopoverObject>({\n    name: \"\",\n    description: \"\",\n    subtitle: \"\",\n    image: \"\",\n    icon: \"\",\n  });\n\n  useEffect(() => {\n    if (popoverObject) {\n      setSelectedObject({\n        name: popoverObject.name,\n        description: popoverObject.description,\n        subtitle: \"Epic Monster\",\n        image: popoverObject.image,\n        icon: \"dragon.svg\",\n      });\n      return;\n    }\n\n    if (mapDatum) {\n      setSelectedObject({\n        name: mapDatum.id,\n        description: mapDatum.description,\n        subtitle: mapDatum.subTitle,\n        image: mapDatum.banner,\n        icon: mapDatum.alt,\n      });\n    }\n  }, [popoverObject, mapDatum]);\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Popover\n        id=\"mouse-over-popover\"\n        className={classes.popover}\n        classes={{\n          paper: classes.paper,\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: -37,\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\",\n        }}\n        onClose={handlePopoverClose}\n        disableRestoreFocus\n      >\n        <ImageAsset\n          alt={selectedObject.icon}\n          width={PopoverDimensions.iconSize}\n          height={PopoverDimensions.iconSize}\n          style={{\n            position: \"absolute\",\n            zIndex: 999,\n            marginLeft: PopoverDimensions.iconMarginLeft,\n            marginTop:\n              PopoverDimensions.bannerHeight + PopoverDimensions.marginTop,\n          }}\n        />\n        <Typography className={classes.titleText}>\n          {selectedObject.name}\n        </Typography>\n        <Typography className={classes.subtitleText}>\n          {selectedObject.subtitle}\n        </Typography>\n        <Typography className={classes.descriptionText}>\n          {selectedObject.description}\n        </Typography>\n        <ImageAsset\n          alt={selectedObject.image ?? \"unknown.svg\"}\n          style={{\n            objectFit: \"cover\",\n            position: \"absolute\",\n            marginLeft: PopoverDimensions.bannerMarginLeft,\n            height: PopoverDimensions.bannerHeight,\n            width: PopoverDimensions.bannerWidth,\n            border: `1px solid ${mainColour.yellow}`,\n          }}\n        />\n        <ImageAsset alt=\"frameInfoCardComponent.svg\" />\n      </Popover>\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\n\ninterface WikiProps {}\n\nexport const Wiki: FC<WikiProps> = ({}) => {\n  return <h1>Wiki</h1>;\n};\n","import { useEffect, useState } from \"react\";\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState({\n    height: 0,\n    width: 0,\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    updateWindowDimensions();\n  }, []);\n\n  const updateWindowDimensions = () => {\n    setWindowDimensions({\n      height: window.innerHeight,\n      width: window.innerWidth,\n    });\n  };\n\n  return windowDimensions;\n};\n","import Typography, { TypographyProps } from \"@material-ui/core/Typography\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { findKey, isEmpty } from \"lodash\";\nimport { InfoPopover } from \"./InfoPopover\";\n\ninterface Position {\n  start: number;\n  end: number;\n}\nexport interface ColourMap {\n  [key: string]: Array<string>;\n}\n\n/**\n * An object with the following key and value types:\n *\n * @example\n * Key: 'string to url-ify (with tooltip)'\n * Value: Object {\n *   url: 'the URL to link to'\n *   hasTooltip: true\n *   tooltipData: { image: \"\", icon: \"\", name: \"\", description: \"\" }\n * }\n *\n * @example\n * Key: 'string to url-ify (without tooltip)'\n * Value: Object {\n *   url: 'the URL to link to'\n *   hasTooltip: false\n * }\n */\nexport type LinkMap = {\n  [key: string]:\n    | {\n        url: string;\n        hasTooltip: true;\n        tooltipData: LinkMapObject;\n      }\n    | {\n        url: string;\n        hasTooltip: false;\n        tooltipData?: never;\n      };\n};\n\nexport interface LinkMapObject {\n  image: string;\n  icon: string;\n  name: string;\n  description: string;\n}\n\ninterface IndexMap {\n  [key: string]: Array<Position>;\n}\n\n/**\n * For use with API data\n * @param {string} text\n * @param {ColourMap} colourMap\n */\nexport interface TextColourizerTypes {\n  text: string;\n  colourMap: ColourMap | {};\n  linkMap?: LinkMap;\n}\n\ninterface BaseProps extends TypographyProps {\n  colourMap: ColourMap;\n  linkMap?: LinkMap;\n}\n\ninterface PropsWithChildren extends BaseProps {\n  text?: never;\n  children: React.ReactNode;\n}\n\ninterface PropsWithText extends BaseProps {\n  text: string;\n  children?: never;\n}\n\nexport type TextColourizerProps = PropsWithChildren | PropsWithText;\n\nconst initialTooltipState = Object.freeze({\n  image: \"\",\n  icon: \"\",\n  name: \"\",\n  description: \"\",\n});\n\nexport const TextColourizer: FC<TextColourizerProps> = (props) => {\n  const { text, colourMap, children, linkMap, ...typographyProps } = props;\n  const [rendered, setRendered] = useState<JSX.Element[]>();\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n  const [hoveredObject, setHoveredObject] = useState<LinkMapObject>(\n    initialTooltipState\n  );\n  const open = Boolean(anchorEl);\n\n  const handlePopoverOpen = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    const originalText = text || children!.toString();\n    const indexMap: IndexMap = {};\n    let setOfStartingPositions: Set<number> = new Set();\n\n    const populateIndexMap = () => {\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Finding_all_the_occurrences_of_an_element\n      Object.keys(colourMap).forEach((colour) => {\n        colourMap[colour].forEach((phrase) => {\n          let indices = [];\n          let idx = originalText.indexOf(phrase);\n          while (idx !== -1) {\n            setOfStartingPositions.add(idx);\n            indices.push({\n              start: idx,\n              end: idx + phrase.length,\n            });\n            idx = originalText.indexOf(phrase, idx + 1);\n          }\n          indexMap[colour] = indexMap[colour]\n            ? [...indexMap[colour], ...indices]\n            : indices;\n        });\n      });\n    };\n\n    const getColouredJSX = (): Array<JSX.Element> => {\n      let result: Array<JSX.Element> = [];\n      let key = 0;\n\n      for (let i = 0; i <= originalText.length; ) {\n        let curr = [];\n        while (!setOfStartingPositions.has(i) && i !== originalText.length) {\n          curr.push(originalText[i]);\n          i++;\n        }\n\n        const normalPhrase = curr.join(\"\");\n        result.push(<span key={`normal_${key++}`}>{normalPhrase}</span>);\n        if (i === originalText.length) return result;\n\n        const colour = findKey(indexMap, (e) => e.some((x) => x.start === i));\n        const phrase = indexMap[colour!].find((e) => e.start === i);\n\n        result.push(\n          <span key={`coloured_${key++}`} style={{ color: colour! }}>\n            {originalText.substring(phrase!.start, phrase!.end)}\n          </span>\n        );\n        i = phrase!.end;\n      }\n\n      return result;\n    };\n\n    const getJsxWithUrls = (arr: Array<JSX.Element>) => {\n      let result: JSX.Element[] = [];\n      let elemKey: number = 0;\n      arr.forEach((e) => {\n        let curr: JSX.Element[] = [];\n        Object.keys(linkMap!).forEach((key) => {\n          const children = e.props.children;\n          if (children.includes(key)) {\n            const start = children.indexOf(key);\n            const end = start + key.length;\n            if (start !== 0) {\n              curr.push(\n                <span key={`withUrl_${elemKey++}`} style={{ ...e.props.style }}>\n                  {children.substring(0, start)}\n                </span>\n              );\n            }\n            curr.push(\n              <a\n                style={{ color: e.props.style?.color || \"inherit\" }}\n                href={linkMap![key].url}\n                key={`withUrl_${elemKey++}`}\n                onMouseEnter={(e) => {\n                  if (linkMap![key].hasTooltip) {\n                    setHoveredObject(linkMap![key].tooltipData!);\n                    handlePopoverOpen(e);\n                  }\n                }}\n                onMouseLeave={() => {\n                  if (linkMap![key].hasTooltip) {\n                    handlePopoverClose();\n                  }\n                }}\n              >\n                {children.substring(start, end)}\n              </a>\n            );\n            if (end !== children.length) {\n              curr.push(\n                <span key={`withUrl_${elemKey++}`} style={{ ...e.props.style }}>\n                  {children.substring(end, children.length)}\n                </span>\n              );\n            }\n          }\n        });\n        curr.length\n          ? result.push(<>{curr.map((elem) => elem)}</>)\n          : result.push(e);\n      });\n\n      return result;\n    };\n\n    if (isEmpty(colourMap)) {\n      if (linkMap) {\n        setRendered(getJsxWithUrls([<span>{originalText}</span>]));\n      } else {\n        setRendered([<span>{originalText}</span>]);\n      }\n    } else {\n      populateIndexMap();\n      if (linkMap) {\n        setRendered(getJsxWithUrls(getColouredJSX()));\n      } else {\n        setRendered(getColouredJSX());\n      }\n    }\n  }, [children, colourMap, text, linkMap]);\n\n  return (\n    <span>\n      <Typography display=\"inline\" {...typographyProps}>\n        {rendered?.map((elem) => elem)}\n      </Typography>\n      <InfoPopover\n        open={open}\n        anchorEl={anchorEl}\n        handlePopoverClose={handlePopoverClose}\n        popoverObject={hoveredObject}\n      />\n    </span>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { TextColourizerTypes, TextColourizer } from \"../utils/TextColourizer\";\n\ninterface SubListType extends TextColourizerTypes {\n  sublist?: Array<SubListType>;\n}\n\ninterface ColouredListProps extends React.ComponentProps<\"div\"> {\n  listItems: Array<SubListType>;\n}\n\nconst ColouredListStyles = styled.div`\n  li {\n    margin-right: 160px;\n  }\n\n  ul {\n    margin: 0;\n    width: 100%;\n  }\n\n  .listStyles {\n    margin-left: -20px;\n  }\n\n  p {\n    line-height: 19px;\n  }\n`;\n\nexport const ColouredList: FC<ColouredListProps> = (props) => {\n  const { listItems, ...divProps } = props;\n\n  return (\n    <ColouredListStyles>\n      <div {...divProps}>\n        <ul>\n          {listItems?.map((listItem) => {\n            return (\n              <li className=\"listStyles\">\n                <TextColourizer\n                  colourMap={listItem.colourMap}\n                  linkMap={listItem.linkMap}\n                >\n                  {listItem.text}\n                </TextColourizer>\n                {listItem.sublist && (\n                  <ColouredList\n                    listItems={listItem.sublist}\n                    style={{ paddingLeft: 20 }}\n                  />\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </ColouredListStyles>\n  );\n};\n","// listMarginTop should be 20. Set it to 10 for screen size purposes\n// iconAndTextMarginTop should be 10. Set it to 0 for screen size purposes\nexport enum SummonersRiftConstants {\n  marginTop = 30,\n  marginLeft = 60,\n  neutralMonstersHeaderMarginTop = 30,\n  listMarginTop = 10,\n  iconAndTextMarginTop = 0,\n  iconMarginLeft = 10,\n}\n\nexport enum SummonersRiftMapConstants {\n  marginTop = 5,\n}\n\nexport enum infoDrawerConstants {\n  monsterTitleMarginBottom = 10,\n  closeButtonMarginRight = 15,\n  marginLeft = 20,\n  monsterIconMarginRight = 10,\n}\n\nexport enum infoCardTabsConstants {\n  marginTop = 8,\n  marginLeft = -5,\n  infoCardTabLineMarginLeft = 19,\n  infoCardTabLineMarginTop = -12,\n  splashArtMarginLeft = 20,\n  splashArtMarginTop = 20,\n}\n\nexport enum monsterDetailsConstants {\n  statsMarginTop = 30,\n  statsMarginLeft = 20,\n  statsMarginBottom = 20,\n  statsTitleMarginBottom = 10,\n  statsColumnMarginLeft = 15,\n  statsColumnItemsMarginLeft = 10,\n  spawnSectionMarginRight = -30,\n}\n\nexport enum infoSectionConstants {\n  marginLeft = 40,\n  spanWithIconMarginTop = 20,\n  spanWithoutIconMarginTop = 5,\n  abilitiesSubHeaderMarginLeft = 20,\n  colouredListWithIconMarginLeft = 90,\n  colouredListWithoutIconMarginLeft = 40,\n  colouredListMarginTop = 10,\n}\n\nexport enum infoHeaderConstants {\n  marginLeft = 20,\n  effectsDescriptionMarginTop = 20,\n  effectsDescriptionMarginLeft = 10,\n  titleStyleMarginTop = 20,\n  titleStyleMarginLeft = 20,\n  subheaderStyleMarginTop = 20,\n  subheaderStyleMarginLeft = 20,\n}\n\nexport enum closeArrowConstants {\n  marginTop = -40,\n  marginRight = 20,\n}\n\nexport enum lineConstants {\n  marginTop = 20, \n  marginLeft = 20,\n}\n\nexport enum footerConstants {\n  marginTop = 10,\n  enderMarginTop = 30,\n}\n\n// lineMarginTop is 27 because the distance between the bottom of last list element and\n// the bottom of the version number is 90\nexport enum patchNoteConstants {\n  marginLeft = 20,\n  lineMarginTop = 27,\n  versionNumberMarginTop = 20,\n  patchNoteListMarginTop = 20,\n  patchNoteListMarginLeft = 20,\n  listElementsMarginTop = 10,\n}\n\nexport enum donateInfoBoxConstants {\n  headerTextMarginTop = 10,\n  textMarginTop = 5,\n}","import { Typography } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { infoHeaderConstants, closeArrowConstants } from \"../styles/dimension\";\nimport { mainColour } from \"../styles/palette\";\n\ninterface InfoHeaderProps extends React.ComponentProps<\"div\"> {\n  title: string;\n  subtitle?: string;\n  isSubheader?: boolean;\n  handleArrowClick?: (title?: string) => void;\n}\n\nconst HeaderStyles = styled.div`\n  p {\n    line-height: 28px;\n  }\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  .effectsDescription {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-top: ${infoHeaderConstants.effectsDescriptionMarginTop}px;\n    margin-left: ${infoHeaderConstants.effectsDescriptionMarginLeft}px;\n    color: ${mainColour.grey};\n  }\n\n  .titleStyle {\n    font-family: Friz Quadrata;\n    margin-top: ${infoHeaderConstants.titleStyleMarginTop}px;\n    margin-left: ${infoHeaderConstants.titleStyleMarginLeft}px;\n    font-size: 30px;\n    color: ${mainColour.yellow};\n  }\n\n  .subheaderStyle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    margin-left: ${infoHeaderConstants.subheaderStyleMarginLeft}px;\n    margin-top: ${infoHeaderConstants.subheaderStyleMarginTop}px;\n    color: ${mainColour.yellow};\n  }\n\n  .closeArrow {\n    z-index: 10000;\n    display: flex;\n    margin-top: ${closeArrowConstants.marginTop}px;\n    margin-right: ${closeArrowConstants.marginRight}px;\n    float: right;\n  }\n\n  .arrow-up {\n    transform: rotate(0deg);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  .arrow-down {\n    transform: rotate(180deg);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  .closeArrow:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const InfoHeader: FC<InfoHeaderProps> = (props) => {\n  const { title, subtitle, isSubheader, handleArrowClick, ...divProps } = props;\n  const [isArrowOpen, setIsArrowOpen] = useState(false);\n\n  return (\n    <HeaderStyles>\n      <div {...divProps}>\n        <Typography className={isSubheader ? \"subheaderStyle\" : \"titleStyle\"}>\n          {title}\n        </Typography>\n        <Typography className=\"effectsDescription\">{subtitle}</Typography>\n      </div>\n      {!isSubheader && (\n        <div\n          className=\"closeArrow\"\n          onClick={() => setIsArrowOpen(!isArrowOpen)}\n        >\n          <ImageAsset\n            alt=\"arrow.svg\"\n            className={isArrowOpen ? \"arrow-down\" : \"arrow-up\"}\n            onClick={() => handleArrowClick && handleArrowClick(title)}\n          />\n        </div>\n      )}\n    </HeaderStyles>\n  );\n};\n","import { Grid, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { mainColour } from \"../styles/palette\";\nimport { footerConstants } from \"../styles/dimension\";\n\ninterface FooterProps extends React.ComponentProps<\"div\"> {}\n\nconst StyledTabs = withStyles({\n  root: {\n    color: mainColour.white,\n  },\n})(Tabs);\n\nconst useStyles = makeStyles({\n  indicator: {\n    color: mainColour.blue,\n  },\n  root: {\n    color: mainColour.white,\n    fontFamily: \"Friz Quadrata\",\n  },\n  footerText: {\n    fontFamily: \"Friz Quadrata\",\n    fontSize: 20,\n    textTransform: \"none\",\n  },\n});\n\nexport const Footer: FC<FooterProps> = ({ ...divProps }) => {\n  const classes = useStyles();\n\n  return (\n    <div style={{ marginTop: footerConstants.marginTop }} {...divProps}>\n      <Grid>\n        <StyledTabs\n          // value={value}\n          // onChange={handleChange}\n          indicatorColor=\"primary\"\n          centered\n        >\n          <Tab\n            disableRipple\n            label={\n              <Typography className={classes.footerText}>Overview</Typography>\n            }\n            value={0}\n          />\n          <Tab\n            disableRipple\n            label={\n              <Typography className={classes.footerText}>Effects</Typography>\n            }\n            value={1}\n          />\n          <Tab\n            disableRipple\n            label={\n              <Typography className={classes.footerText}>Abilities</Typography>\n            }\n            value={2}\n          />\n          <Tab\n            disableRipple\n            label={\n              <Typography className={classes.footerText}>Strategy</Typography>\n            }\n            value={3}\n          />\n          <Tab\n            disableRipple\n            label={\n              <Typography className={classes.footerText}>Trivia</Typography>\n            }\n            value={4}\n          />\n        </StyledTabs>\n\n        {/* TODO: Figma shows that marginTop should be 55 from tab text */}\n        <Grid style={{ marginTop: footerConstants.enderMarginTop, textAlign: \"center\" }}>\n          <ImageAsset alt=\"ender.svg\" />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import { Typography } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { mainColour } from \"../styles/palette\";\nimport { ColouredList } from \"./ColouredList\";\nimport { InfoSectionItem } from \"./layoutTypes\";\nimport { Grid } from \"@material-ui/core\";\nimport { infoSectionConstants } from \"../styles/dimension\";\n\ninterface InfoSectionProps {\n  item: InfoSectionItem;\n}\n\nconst InfoSectionStyles = styled.div`\n  .abilitiesSubHeaderStyle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n    color: ${mainColour.white};\n  }\n\n  .effectsStyles {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  .spanWithIcon {\n    margin-top: ${infoSectionConstants.spanWithIconMarginTop}px;\n  }\n\n  .spanWithoutIcon {\n    margin-top: ${infoSectionConstants.spanWithoutIconMarginTop}px;\n  }\n\n  .divWithIcon {\n  }\n`;\n\nconst ICON_SIZE = 30;\n\nexport const InfoSection: FC<InfoSectionProps> = ({ item }) => {\n  return (\n    <InfoSectionStyles>\n      <div className={`effectsStyles ${item.icon && \"divWithIcon\"}`}>\n        <span className={item.icon ? \"spanWithIcon\" : \"spanWithoutIcon\"}>\n          <Grid\n            container\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              marginLeft: infoSectionConstants.marginLeft,\n              alignItems: \"center\",\n            }}\n          >\n            {item.icon && (\n              <Grid>\n                {item.icon && (\n                  <ImageAsset\n                    alt={item.icon}\n                    width={ICON_SIZE}\n                    height={ICON_SIZE}\n                  />\n                )}\n              </Grid>\n            )}\n\n            <Grid item>\n              <Typography\n                className=\"abilitiesSubHeaderStyle\"\n                style={{\n                  color: item.titleColour,\n                  marginLeft: infoSectionConstants.abilitiesSubHeaderMarginLeft,\n                }}\n              >\n                {item.title}\n              </Typography>\n            </Grid>\n          </Grid>\n        </span>\n      </div>\n\n      <div\n        style={{\n          marginLeft: item.icon\n            ? infoSectionConstants.colouredListWithIconMarginLeft\n            : infoSectionConstants.colouredListWithoutIconMarginLeft,\n          marginTop: infoSectionConstants.colouredListMarginTop,\n        }}\n      >\n        {/* <ul> tag with colourize text */}\n        <ColouredList listItems={item.effects} />\n      </div>\n    </InfoSectionStyles>\n  );\n};\n","import { Grid } from \"@material-ui/core\";\nimport React, { FC } from \"react\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { InfoHeader } from \"./InfoHeader\";\nimport { InfoSection } from \"./InfoSection\";\nimport { InfoSectionCategory } from \"./layoutTypes\";\nimport { lineConstants } from \"../styles/dimension\";\n\ninterface InfoContainerProps {\n  subcategories: Array<InfoSectionCategory>;\n}\n\nexport const InfoContainer: FC<InfoContainerProps> = ({ subcategories }) => {\n  return (\n    <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n      {subcategories?.map((subcategory) => {\n        return (\n          <Grid item>\n            {subcategory.title !== \"noSubcategory\" && (\n              <InfoHeader isSubheader={true} title={subcategory.title} />\n            )}\n              {subcategory.data.map((ability) => {\n                return <InfoSection item={ability} />;\n              })}\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n","import React, { FC } from \"react\";\nimport { ColouredList } from \"../layout/ColouredList\";\nimport { mainColour } from \"../styles/palette\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { TextColourizer } from \"./TextColourizer\";\nimport { InfoHeader } from \"../layout/InfoHeader\";\nimport { Footer } from \"../layout/Footer\";\nimport { InfoContainer } from \"../layout/InfoContainer\";\nimport { InfoSection } from \"../layout/InfoSection\";\n\ninterface ComponentCatalogueProps {}\n\nexport const ComponentCatalogue: FC<ComponentCatalogueProps> = ({}) => {\n  return (\n    <>\n      {/** TextColourizer */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>TextColourizer</h3>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`const text = \"Reduces the target's armor and magic resistance by 0.5, stacking up to 100 times for a total of 50 maximum resistances reduction. Lasts for 8s, reduced to 4.5s after Baron Nashor is slain\";\n              \nconst colourMap = {\n  [mainColour.purple]: [\"Baron Nashor\"],\n  [mainColour.green]: [\"resistance\", \"0.5\", \"100\", \"50\", \"8s\", \"4.5s\"],\n  [mainColour.orange]: [\"armor\"],\n};\n\n<TextColourizer text={text} colourMap={colourMap} />\n\n// or\n\n<TextColourizer colourMap={colourMap}>\n  {text}\n</TextColourizer>`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`// will accept either a text prop or a string as children (at least one and never both)\n// also accepts any Typography prop\n\ninterface BaseProps extends TypographyProps {\n  colourMap: ColourMap;\n}\n\ninterface PropsWithChildren extends BaseProps {\n  text?: never;\n  children: React.ReactNode;\n}\n\ninterface PropsWithText extends BaseProps {\n  text: string;\n  children?: never;\n}\n\ntype TextColourizerProps = PropsWithChildren | PropsWithText;`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <TextColourizer\n              colourMap={{\n                [mainColour.purple]: [\"Baron Nashor\"],\n                [mainColour.green]: [\n                  \"resistance\",\n                  \"0.5\",\n                  \"100\",\n                  \"50\",\n                  \"8s\",\n                  \"4.5s\",\n                ],\n                [mainColour.orange]: [\"armor\"],\n              }}\n            >\n              Reduces the target's armor and magic resistance by 0.5, stacking\n              up to 100 times for a total of 50 maximum resistances reduction.\n              Lasts for 8s, reduced to 4.5s after Baron Nashor is slain\n            </TextColourizer>\n          </div>\n        </Grid>\n      </Grid>\n      {/** ColouredList */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>ColouredList</h3>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`const listItemProps: Array<TextColourizerTypes> = [\n  {\n    text: \"List item 1\",\n    colourMap: {\n      [mainColour.green]: [\"List\"],\n      [mainColour.blue]: [\"1\"],\n    },\n  },\n  {\n    text: \"List item 2\",\n    colourMap: {},\n  },\n  {\n    text: \"List item 3\",\n    colourMap: {\n      [mainColour.red]: [\"item\"],\n    },\n  }\n];\n\n<ColouredList listItems={listItemProps} />`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`interface ColouredListProps extends React.ComponentProps<\"div\"> {\n  listItems: Array<TextColourizerTypes>;\n}\n\ninterface ColourMap {\n  [key: string]: Array<string>;\n}\n\ninterface TextColourizerTypes {\n  text: string;\n  colourMap: ColourMap | {};\n}`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={4}>\n          <div style={{ margin: 20 }}>\n            <ColouredList\n              listItems={[\n                {\n                  text: \"List item 1\",\n                  colourMap: {\n                    [mainColour.green]: [\"List\"],\n                    [mainColour.blue]: [\"1\"],\n                  },\n                },\n                {\n                  text: \"List item 2\",\n                  colourMap: {},\n                },\n                {\n                  text: \"List item 3\",\n                  colourMap: {\n                    [mainColour.red]: [\"item\"],\n                  },\n                },\n              ]}\n            />\n          </div>\n        </Grid>\n      </Grid>\n      {/** InfoHeader */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>InfoHeader</h3>\n        </Grid>\n        <Grid item xs={6}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`const title = \"This is a title\";\nconst subheader = \"This is a subheader\";\nconst subtitle = \"This is a subtitle\";\n\n<InfoHeader title={title} />\n\n<InfoHeader title={subheader} isSubheader={true} />\n\n<InfoHeader title={subheader} subtitle={subtitle} isSubheader={true} />\n\n<InfoHeader title={title} />\n<InfoHeader title={subheader} subtitle={subtitle} isSubheader={true} />`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <SyntaxHighlighter\n                  language=\"typescript\"\n                  customStyle={{ borderRadius: 10 }}\n                  style={vscDarkPlus}\n                  wrapLongLines\n                >\n                  {`interface InfoHeaderProps extends React.ComponentProps<\"div\"> {\n  title: string;\n  subtitle?: string;\n  isSubheader?: boolean;\n}`}\n                </SyntaxHighlighter>\n              </div>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <div style={{ margin: 20 }}>\n              <InfoHeader title={\"This is a title\"} />\n              <hr />\n              <InfoHeader title={\"This is a subheader\"} isSubheader={true} />\n              <hr />\n              <InfoHeader\n                title={\"This is a subheader\"}\n                subtitle={\"This is a subtitle\"}\n                isSubheader={true}\n              />\n              <hr />\n              <InfoHeader title={\"This is a title\"} />\n              <InfoHeader\n                title={\"This is a subheader\"}\n                isSubheader\n                subtitle={\"This is a subtitle\"}\n              />\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/** InfoSection */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>InfoSection</h3>\n        </Grid>\n        <Grid item xs={6}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              customStyle={{ borderRadius: 10 }}\n              style={vscDarkPlus}\n              wrapLongLines\n            >\n              {`/** First example */\nconst firstExample: InfoSectionProps = {\n  title: \"This is a coloured title\",\n  titleColour: \"#b67f15\",\n  icon: \"elderdrake.svg\",\n  effects: [\n    {\n      text: \"With a list of coloured bullet points\",\n      colourMap: {\n        \"#aa0013\": [\"coloured\", \"points\"],\n      },\n    },\n    {\n      text: \"List items can have colours\",\n      colourMap: {\n        \"#108b94\": [\"List items\"],\n        \"#8717de\": [\"colours\"],\n      },\n    },\n    {\n      text: \"But they don't have to\",\n      colourMap: {},\n    },\n  ],\n};\n              \n<InfoSection item={firstExample} />\n\n/** Second example */\n<InfoSection\n  item={{\n    title: \"This is a title with an icon (eg. for an ability)\",\n    titleColour: \"\",\n    icon: \"cat.svg\",\n    effects: [\n      {\n        text:\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        colourMap: {},\n      },\n    ],\n  }}\n/>\n\n/** Third example */\n<InfoSection\n  item={{\n    title:\n      \"This is a title without an icon (eg. a trivia section)\",\n    titleColour: \"\",\n    icon: \"\",\n    effects: [\n      {\n        text:\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        colourMap: {},\n      },\n    ],\n  }}\n/>`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <SyntaxHighlighter\n                  language=\"typescript\"\n                  customStyle={{ borderRadius: 10 }}\n                  style={vscDarkPlus}\n                  wrapLongLines\n                >\n                  {`interface InfoSectionProps {\n  item: InfoSectionItem;\n}\n\ninterface InfoSectionItem {\n  title: string;\n  titleColour: string;\n  icon: string;\n  effects: Array<TextColourizerTypes>;\n}\n\ninterface TextColourizerTypes {\n  text: string;\n  colourMap: ColourMap | {};\n}`}\n                </SyntaxHighlighter>\n              </div>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <div style={{ margin: 20 }}>\n              <InfoSection\n                item={{\n                  title: \"This is a coloured title\",\n                  titleColour: \"#b67f15\",\n                  icon: \"elderdrake.svg\",\n                  effects: [\n                    {\n                      text: \"With a list of coloured bullet points\",\n                      colourMap: {\n                        \"#aa0013\": [\"coloured\", \"points\"],\n                      },\n                    },\n                    {\n                      text: \"List items can have colours\",\n                      colourMap: {\n                        \"#108b94\": [\"List items\"],\n                        \"#8717de\": [\"colours\"],\n                      },\n                    },\n                    {\n                      text: \"But they don't have to\",\n                      colourMap: {},\n                    },\n                  ],\n                }}\n              />\n              <br />\n              <InfoSection\n                item={{\n                  title: \"This is a title with an icon (eg. for an ability)\",\n                  titleColour: \"\",\n                  icon: \"cat.svg\",\n                  effects: [\n                    {\n                      text:\n                        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                      colourMap: {},\n                    },\n                  ],\n                }}\n              />\n              <br />\n              <InfoSection\n                item={{\n                  title:\n                    \"This is a title without an icon (eg. a trivia section)\",\n                  titleColour: \"\",\n                  icon: \"\",\n                  effects: [\n                    {\n                      text:\n                        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                      colourMap: {},\n                    },\n                  ],\n                }}\n              />\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/** InfoContainer */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>InfoContainer</h3>\n        </Grid>\n        <Grid item xs={6}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              style={vscDarkPlus}\n              customStyle={{ borderRadius: 10 }}\n              wrapLongLines\n            >\n              {`// this will come from API data most of the time. just for reference here if you want to use it somewhere else.\n// This component is composed of a map of InfoSection components (see above)\n\nconst subcategories: InfoSectionCategory = [\n  {\n    title: \"Mythical Creatures\",\n    data: [\n      {\n        title: \"Pusheen\",\n        titleColour: \"#6a0dad\",\n        icon: \"pusheen.jpg\",\n        effects: [\n          {\n            text:\n              \"Pusheen is a tubby tabby cat who brings smiles and laughter to people all around the world.\",\n            colourMap: {\n              \"#108B94\": [\"tubby tabby cat\"],\n              \"#FF6B00\": [\"smiles\", \"laughter\"],\n            },\n          },\n          {\n            text:\n              \"She became famous through her animated comics and GIFs\",\n            colourMap: {\n              \"#ff6b00\": [\"animated comics\", \"GIFs\"],\n            },\n          },\n        ],\n      },\n      {\n        title: \"Poro\",\n        titleColour: \"\",\n        icon: \"poro.jpg\",\n        effects: [\n          {\n            text:\n              \"They have a heart-shaped underbelly because they're made of love\",\n            colourMap: {\n              \"#FFC0CB\": [\"heart-shaped\", \"love\"],\n            },\n          },\n          {\n            text:\n              \"A poro's horns perk up when it's excited and droop down when it's scared.\",\n            colourMap: {},\n          },\n        ],\n      },\n    ],\n  },\n]\n\n<InfoContainer subcategories={subcategories} />`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <SyntaxHighlighter\n                  language=\"typescript\"\n                  style={vscDarkPlus}\n                  customStyle={{ borderRadius: 10 }}\n                  wrapLongLines\n                >\n                  {`interface InfoSectionCategory {\n  title: string;\n  data: Array<InfoSectionItem>;\n}\n\ninterface InfoSectionItem {\n  title: string;\n  titleColour: string;\n  icon: string;\n  effects: Array<TextColourizerTypes>;\n}\n\ninterface InfoContainerProps {\n  subcategories: Array<InfoSectionCategory>;\n}`}\n                </SyntaxHighlighter>\n              </div>\n            </Grid>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <InfoContainer\n                  subcategories={[\n                    {\n                      title: \"Mythical Creatures\",\n                      data: [\n                        {\n                          title: \"Pusheen\",\n                          titleColour: \"#89cff0\",\n                          icon: \"pusheen.jpg\",\n                          effects: [\n                            {\n                              text:\n                                \"Pusheen is a tubby tabby cat who brings smiles and laughter to people all around the world.\",\n                              colourMap: {\n                                \"#108B94\": [\"tubby tabby cat\"],\n                                \"#FF6B00\": [\"smiles\", \"laughter\"],\n                              },\n                            },\n                            {\n                              text:\n                                \"She became famous through her animated comics and GIFs\",\n                              colourMap: {\n                                \"#ff6b00\": [\"animated comics\", \"GIFs\"],\n                              },\n                            },\n                          ],\n                        },\n                        {\n                          title: \"Poro\",\n                          titleColour: \"\",\n                          icon: \"poro.jpg\",\n                          effects: [\n                            {\n                              text:\n                                \"They have a heart-shaped underbelly because they're made of love\",\n                              colourMap: {\n                                \"#FFC0CB\": [\"heart-shaped\", \"love\"],\n                              },\n                            },\n                            {\n                              text:\n                                \"A poro's horns perk up when it's excited and droop down when it's scared.\",\n                              colourMap: {},\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  ]}\n                />\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/** Footer */}\n      <Grid container>\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <h3>Footer</h3>\n        </Grid>\n        <Grid item xs={6}>\n          <div style={{ margin: 20 }}>\n            <SyntaxHighlighter\n              language=\"typescript\"\n              style={vscDarkPlus}\n              customStyle={{ borderRadius: 10 }}\n              wrapLongLines\n            >\n              {`<Footer />\\n<Footer style={{ border: \"1px solid white\" }} />`}\n            </SyntaxHighlighter>\n          </div>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <SyntaxHighlighter\n                  language=\"typescript\"\n                  style={vscDarkPlus}\n                  customStyle={{ borderRadius: 10 }}\n                  wrapLongLines\n                >\n                  {`// can pass div props (eg. style={{}}) into Footer\\ninterface FooterProps extends React.ComponentProps<\"div\"> {}`}\n                </SyntaxHighlighter>\n              </div>\n            </Grid>\n            <Grid item>\n              <div style={{ margin: 20 }}>\n                <Footer />\n                <Footer style={{ border: \"1px solid white\" }} />\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useWindowDimensions } from \"../components/hooks/useWindowDimensions\";\nimport { ComponentCatalogue } from \"../utils/ComponentCatalogue\";\n\nexport const Home: FC = () => {\n  const { height } = useWindowDimensions();\n\n  return (\n    <div style={{ overflowY: \"scroll\", overflowX: 'hidden', height: height - 60 }}>\n      <h1>Home</h1>\n      <ComponentCatalogue />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { mainColour, subColour } from \"../styles/palette\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n    search: {\n      position: \"relative\",\n      backgroundColor: \"transparent\",\n      \"&:hover\": {\n        backgroundColor: \"transparent\",\n      },\n      border: `1px solid ${mainColour.yellow}`,\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: 280,\n      },\n    },\n    searchIcon: {\n      margin: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    inputRoot: {\n      color: subColour.grey,\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical margin + font size from searchIcon\n      marginLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\",\n      },\n    },\n  })\n);\n\nexport default function SummonerSearchBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon style={{ color: `${mainColour.yellow}` }} />\n      </div>\n      <InputBase\n        placeholder=\"Search the Rift\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        inputProps={{ \"aria-label\": \"search\" }}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport { IconButton, Typography } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DragonOptions, RootState } from \"../redux/ReduxTypes\";\nimport {\n  setSelectedDrag,\n  setDragOptions,\n} from \"../redux/actions/dragonActions\";\nimport { mainColour } from \"../styles/palette\";\nimport { ImageAsset } from \"./ImageAsset\";\n\nconst Wrapper = styled.div`\n  .dragIcon {\n    cursor: pointer;\n    margin: 5px;\n  }\n\n  .mapIcon {\n    width: 40px;\n    margin-left: -45px;\n    margin-top: 57px;\n    position: absolute;\n  }\n\n  .toggleButtonStyles {\n    color: ${mainColour.yellow};\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 15px;\n    display: flex;\n    white-space: nowrap;\n    align-items: center;\n  }\n\n  .check-rotate {\n    transform: rotate(45deg);\n  }\n`;\n\nconst dragHeight = 50;\nconst dragWidth = 50;\n\nexport default function SoulSelectionToggle() {\n  const [hoverDrag, setHoverDrag] = useState(\"\");\n  const dispatch = useDispatch();\n  const dragState = useSelector((state: RootState) => state.dragon);\n  const { selectedDragon, dragOptions } = dragState;\n\n  const updateSelectedDrag = (dragType: string) => {\n    dispatch(setSelectedDrag(dragType));\n  };\n\n  const handleToggleCheckBox = (type: String) => {\n    if (type === \"neutralMonster\") {\n      dispatch(\n        setDragOptions({\n          ...dragOptions,\n          showNeutralMonsters: !dragOptions.showNeutralMonsters,\n        })\n      );\n    }\n    if (type === \"jungle\") {\n      dispatch(\n        setDragOptions({\n          ...dragOptions,\n          showJunglePlants: !dragOptions.showJunglePlants,\n        })\n      );\n    }\n    if (type === \"building\") {\n      dispatch(\n        setDragOptions({\n          ...dragOptions,\n          showBuildings: !dragOptions.showBuildings,\n        })\n      );\n    }\n    if (type === \"bush\") {\n      dispatch(\n        setDragOptions({\n          ...dragOptions,\n          showBrushes: !dragOptions.showBrushes,\n        })\n      );\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Grid container style={{ padding: 2 }}>\n        <Grid item xs={5} style={{ display: \"flex\", paddingLeft: 10 }}>\n          <span\n            onClick={() => updateSelectedDrag(\"cloud\")}\n            onMouseEnter={() => setHoverDrag(\"cloud\")}\n            onMouseLeave={() => setHoverDrag(\"\")}\n            className=\"dragIcon\"\n          >\n            <ImageAsset\n              height={dragHeight}\n              width={dragWidth}\n              alt={\n                selectedDragon === \"cloud\" || hoverDrag === \"cloud\"\n                  ? \"cloudFocused.svg\"\n                  : \"cloud.svg\"\n              }\n            />\n            {selectedDragon === \"cloud\" && (\n              <ImageAsset className=\"mapIcon\" alt=\"mapindicator.svg\" />\n            )}\n          </span>\n\n          <span\n            onClick={() => updateSelectedDrag(\"ocean\")}\n            onMouseEnter={() => setHoverDrag(\"ocean\")}\n            onMouseLeave={() => setHoverDrag(\"\")}\n            className=\"dragIcon\"\n          >\n            <ImageAsset\n              className=\"soulIconHover\"\n              height={dragHeight}\n              width={dragWidth}\n              alt={\n                selectedDragon === \"ocean\" || hoverDrag === \"ocean\"\n                  ? \"oceanFocused.svg\"\n                  : \"ocean.svg\"\n              }\n            />\n            {selectedDragon === \"ocean\" && (\n              <ImageAsset className=\"mapIcon\" alt=\"mapindicator.svg\" />\n            )}\n          </span>\n\n          <span\n            onClick={() => updateSelectedDrag(\"infernal\")}\n            onMouseEnter={() => setHoverDrag(\"infernal\")}\n            onMouseLeave={() => setHoverDrag(\"\")}\n            className=\"dragIcon\"\n          >\n            <ImageAsset\n              className=\"soulIconHover\"\n              height={dragHeight}\n              width={dragWidth}\n              alt={\n                selectedDragon === \"infernal\" || hoverDrag === \"infernal\"\n                  ? \"infernalFocused.svg\"\n                  : \"infernal.svg\"\n              }\n            />\n            {selectedDragon === \"infernal\" && (\n              <ImageAsset className=\"mapIcon\" alt=\"mapindicator.svg\" />\n            )}\n          </span>\n          <span\n            onClick={() => updateSelectedDrag(\"mountain\")}\n            onMouseEnter={() => setHoverDrag(\"mountain\")}\n            onMouseLeave={() => setHoverDrag(\"\")}\n            className=\"dragIcon\"\n          >\n            <ImageAsset\n              className=\"soulIconHover\"\n              height={dragHeight}\n              width={dragWidth}\n              alt={\n                selectedDragon === \"mountain\" || hoverDrag === \"mountain\"\n                  ? \"mountainFocused.svg\"\n                  : \"mountain.svg\"\n              }\n            />\n            {selectedDragon === \"mountain\" && (\n              <ImageAsset className=\"mapIcon\" alt=\"mapindicator.svg\" />\n            )}\n          </span>\n        </Grid>\n        <Grid item xs={4}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <Checkbox\n              style={{ width: 10, height: 10 }}\n              checkedIcon={<ImageAsset alt=\"checkboxborder.svg\" />}\n              icon={<ImageAsset alt=\"checkbox.svg\" />}\n              onChange={() => handleToggleCheckBox(\"neutralMonster\")}\n            />\n            <Typography className={\"toggleButtonStyles\"}>\n              Show neutral monsters\n            </Typography>\n          </div>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <Checkbox\n              style={{ width: 10, height: 10 }}\n              icon={<ImageAsset alt=\"checkboxborder.svg\" />}\n              checkedIcon={<ImageAsset alt=\"checkbox.svg\" />}\n              onChange={() => handleToggleCheckBox(\"jungle\")}\n            />\n            <Typography className={\"toggleButtonStyles\"}>\n              Show jungle plants{\" \"}\n            </Typography>\n          </div>\n        </Grid>\n        {/* TODO: set paddingLeft to 55 later */}\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"right\",\n            paddingLeft: 20,\n          }}\n        >\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <Checkbox\n              style={{ width: 10, height: 10 }}\n              checkedIcon={<ImageAsset alt=\"checkboxborder.svg\" />}\n              icon={<ImageAsset alt=\"checkbox.svg\" />}\n              onChange={() => handleToggleCheckBox(\"building\")}\n            />\n            <Typography className={\"toggleButtonStyles\"}>\n              Show buildings\n            </Typography>\n          </div>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <Checkbox\n              style={{ width: 10, height: 10 }}\n              icon={<ImageAsset alt=\"checkboxborder.svg\" />}\n              checkedIcon={<ImageAsset alt=\"checkbox.svg\" />}\n              onChange={() => handleToggleCheckBox(\"bush\")}\n            />\n            <Typography className={\"toggleButtonStyles\"}>\n              Show brushes\n            </Typography>\n          </div>\n        </Grid>\n      </Grid>\n    </Wrapper>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ImageAsset } from \"./ImageAsset\";\n\nimport SoulSelectionToggle from \"../components/SoulSelectionToggle\";\nimport newMapData from \"../assets/newMapData.json\";\n\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./mapData.css\";\nimport { InfoPopover } from \"../utils/InfoPopover\";\nimport { setSelectedMonster } from \"../redux/actions/monsterActions\";\nimport { setInfoDrawerBoolean } from \"../redux/actions/pageActions\";\nimport { SummonersRiftMapConstants } from \"../styles/dimension\";\nexport interface MapType {\n  id: string;\n  alt: string;\n  className: string;\n  width: string;\n  height: string;\n  banner: string;\n  description: string;\n  subTitle: string;\n}\n\nexport default function SummonersRiftMap() {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n  const dispatch = useDispatch();\n\n  const dragState = useSelector((state: RootState) => state.dragon);\n\n  const [hoveredObject, setHoveredObject] = useState<MapType>({\n    id: \"\",\n    alt: \"\",\n    className: \"\",\n    width: \"\",\n    height: \"\",\n    banner: \"\",\n    description: \"\",\n    subTitle: \"\",\n  });\n  const [showInfoCard, setShowInfoCard] = useState(false);\n  const open = Boolean(anchorEl);\n\n  const handlePopoverOpen = (\n    event: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleShowInfoCard = (\n    mapDatum: MapType,\n    e: React.MouseEvent<HTMLElement, MouseEvent>\n  ) => {\n    setHoveredObject(mapDatum);\n    setShowInfoCard(true);\n    handlePopoverOpen(e);\n  };\n  const handleHideInfoCard = (mapDatum: MapType) => {\n    setHoveredObject(mapDatum);\n    setShowInfoCard(false);\n    handlePopoverClose();\n  };\n\n  const filterByType = (type: String) => {\n    if (type === \"monster\") return dragState.dragOptions?.showNeutralMonsters;\n    if (type === \"building\") return dragState.dragOptions?.showBuildings;\n    if (type === \"junglePlant\") return dragState.dragOptions?.showJunglePlants;\n    if (type === \"bush\") return dragState.dragOptions?.showBrushes;\n    return false;\n  };\n\n  return (\n    <>\n      <SoulSelectionToggle />\n      <div className=\"mapContainer\">\n        {newMapData\n          .filter((mapDatum) => filterByType(mapDatum.objectType))\n          .map((mapDatum) => {\n            return (\n              <ImageAsset\n                alt={mapDatum.alt}\n                className={mapDatum.className}\n                width={mapDatum.width}\n                height={mapDatum.height}\n                onMouseEnter={(e) => handleShowInfoCard(mapDatum, e)}\n                onMouseLeave={() => handleHideInfoCard(mapDatum)}\n                onClick={() => {\n                  dispatch(setSelectedMonster(mapDatum.id));\n                  dispatch(setInfoDrawerBoolean(true));\n                }}\n              />\n            );\n          })}\n        {/* Map */}\n        {dragState.selectedDragon === \"ocean\" ? (\n          <ImageAsset\n            alt=\"cloudMap.svg\"\n            height=\"100%\"\n            width=\"100%\"\n            style={{ marginTop: SummonersRiftMapConstants.marginTop }}\n          />\n        ) : (\n          <ImageAsset\n            alt={`${dragState.selectedDragon}Map.svg`}\n            height=\"100%\"\n            width=\"100%\"\n            style={{ marginTop: SummonersRiftMapConstants.marginTop }}\n          />\n        )}\n      </div>\n      {showInfoCard && (\n        <InfoPopover\n          open={open}\n          anchorEl={anchorEl}\n          handlePopoverClose={handlePopoverClose}\n          mapDatum={hoveredObject}\n        />\n      )}\n    </>\n  );\n}\n","import React, { FC, useEffect, useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { mainColour } from \"../../styles/palette\";\nimport styled from \"styled-components\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { ImageAsset } from \"../ImageAsset\";\nimport { MonsterDetails } from \"../../monster-layout/MonsterDetails\";\n\nimport { TextColourizer } from \"../../utils/TextColourizer\";\nimport { infoSectionConstants, monsterDetailsConstants } from \"../../styles/dimension\";\n\nconst StyledTabs = withStyles({\n  root: {\n    color: mainColour.white,\n  },\n})(Tabs);\n\nconst useStyles = makeStyles({\n  indicator: {\n    color: mainColour.blue,\n  },\n  root: {\n    color: mainColour.white,\n    fontFamily: \"Friz Quadrata\",\n  },\n  footerText: {\n    fontFamily: \"Friz Quadrata\",\n    fontSize: 20,\n    textTransform: \"none\",\n  },\n  closeArrow: {\n    position: \"absolute\",\n    right: 20,\n    \"&:hover\": {\n      cursor: \"pointer\",\n    },\n  },\n});\n\nexport const MonsterWrapper = styled.div`\n  .infoHeaderText {\n    font-family: Friz Quadrata;\n    font-size: 30px;\n    color: ${mainColour.yellow};\n  }\n\n  .infoText {\n    font-size: 16px;\n    color: ${mainColour.white};\n  }\n\n  .greyText {\n    font-family: Friz Quadrata;\n    font-size: 16px;\n    color: ${mainColour.grey};\n  }\n\n  .overviewContainer {\n    margin-left: ${infoSectionConstants.colouredListWithoutIconMarginLeft}px;\n    margin-top: ${infoSectionConstants.abilitiesSubHeaderMarginLeft}px;\n  }\n\n  .overViewSubTextStyling {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n    margin-bottom: ${monsterDetailsConstants.statsTitleMarginBottom}px;\n\n    /* yellow/main */\n    color: #b67f15;\n  }\n\n  .effectsDescription {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    display: flex;\n    align-items: center;\n\n    /* grey/main */\n    color: #808080;\n  }\n\n  .effectsSubHeaderStyle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n\n    /* purple/main */\n    color: ${mainColour.purple};\n  }\n\n  .abilitiesTitleStyle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n\n    /* yellow/main */\n    color: ${mainColour.yellow};\n  }\n\n  .SubAbilitiesStyle {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: 15px;\n    white-space: nowrap;\n  }\n\n  .abilitiesSubHeaderStyle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 18px;\n    display: flex;\n    align-items: center;\n\n    /* purple/main */\n    color: ${mainColour.white};\n  }\n\n  .textColorStylingOrange {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-left: ${monsterDetailsConstants.statsColumnItemsMarginLeft}px;\n\n    color: ${mainColour.orange};\n  }\n\n  .textColorStylingBlue {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-left: ${monsterDetailsConstants.statsColumnItemsMarginLeft}px;\n\n    color: ${mainColour.blue};\n  }\n\n  .textColorStylingYellow {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n\n    color: ${mainColour.yellow};\n  }\n\n  .textColorStylingPurple {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-left: ${monsterDetailsConstants.statsColumnItemsMarginLeft}px;\n\n    color: ${mainColour.purple};\n  }\n\n  .textColorStylingGreen {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-left: ${monsterDetailsConstants.statsColumnItemsMarginLeft}px;\n\n    color: ${mainColour.green};\n  }\n\n  .textColorStylingWhite {\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 19px;\n    margin-left: ${monsterDetailsConstants.statsColumnItemsMarginLeft}px;\n\n    color: ${mainColour.white};\n  }\n\n  .leftBorder {\n    position: absolute;\n  }\n\n  .bountyStyles {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    height: 34px;\n    white-space: nowrap;\n  }\n\n  .spawnInfo {\n    white-space: normal;\n    line-height: 19px;\n  }\n  \n  .listStyles {\n    margin-left: -20px;\n  }\n\n  .effectsStyles {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n`;\n\ninterface BaronProps {}\n\nexport const Baron: FC<BaronProps> = ({}) => {\n  const classes = useStyles();\n  const [baronData, setBaronData] = useState<any>({});\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/monsters\");\n        const json = await response.json();\n        const baron = json.find((elem: any) => elem.name === \"Baron Nashor\");\n        setBaronData(baron);\n      } catch {\n        // do nothing, API call failed.\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (baronData) {\n      console.log(baronData);\n    }\n  }, [baronData]);\n\n  return (\n    <MonsterWrapper>\n      <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n        {/* OVERVIEW: BOUNTY, STATISTICS, SPAWN */}\n        <Grid item>\n          <MonsterDetails />\n        </Grid>\n        {/* EFFECTS: HEADER AND INFO */}\n        <Grid>\n          {/* EFFECTS LINE SEPARATOR */}\n          <Grid item style={{ paddingTop: 10 }}>\n            <ImageAsset alt=\"line.svg\" />\n          </Grid>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            {/* EFFECTS HEADER */}\n            <Typography className=\"infoHeaderText\">Effects</Typography>\n            <Typography\n              className=\"effectsDescription\"\n              style={{ marginLeft: 25 }}\n            >\n              When killed, grants slayer and their living teammates:\n            </Typography>\n          </div>\n          {/* EFFECTS INFO */}\n          <Grid\n            container\n            spacing={1}\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"handofbaron.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"effectsSubHeaderStyle\">\n                    Hand of Baron\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Gives 12 − 48 (based on minutes) bonus attack damage and 20 − 80 (based on minutes) ability power determined by the time the Baron is slain.\"\n                        colourMap={{\n                          [mainColour.orange]: [\n                            \"12 − 48 (based on minutes) bonus attack damage\",\n                          ],\n                          [mainColour.blue]: [\n                            \"20 − 80 (based on minutes) ability power\",\n                          ],\n                          [mainColour.yellow]: [\"Baron\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"empoweredrecall.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"effectsSubHeaderStyle\">\n                    Empowered Recall\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"After 0.5s cast time, channel for 4s to blink to their team's fountain if not interrupted.\"\n                        colourMap={{\n                          [mainColour.blue]: [\"0.5s cast time\", \"4s\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"effectsSubHeaderStyle\">\n                    Aura - Empowered Minions\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Nearby allied minions gain: Slow Resist, 75% damage reduction from area of effect and damage over time abilities and attacks (except for Super Minions), bonus movement speed equal to 90% averaged movement speed of all nearby champions, capped at 500.\"\n                        colourMap={{\n                          [mainColour.blue]: [\"75% damage reduction\"],\n                          [mainColour.purple]: [\n                            \"bonus movement speed\",\n                            \"90% averaged movement speed\",\n                            \"500\",\n                          ],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        {/* ABILITIES */}\n        <Grid>\n          {/* ABILITIES LINE SEPARATOR */}\n          <Grid item style={{ paddingTop: 10 }}>\n            <ImageAsset alt=\"line.svg\" />\n          </Grid>\n          {/* ABILITES HEADER */}\n          <Grid container>\n            <Grid item xs={9}>\n              <Typography className=\"infoHeaderText\">Abilities</Typography>\n            </Grid>\n            <Grid item>\n              <ImageAsset className={classes.closeArrow} alt=\"arrow.svg\" />\n            </Grid>\n          </Grid>\n          {/* ABILITIES INFO - BASIC ATTACKS*/}\n          <Grid>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                marginTop: 15,\n              }}\n            >\n              <Typography className=\"abilitiesTitleStyle\">\n                Basic Attacks\n              </Typography>\n              <Typography\n                className=\"effectsDescription\"\n                style={{ marginLeft: 25 }}\n              >\n                Baron will attack the unit closest to him\n              </Typography>\n            </div>\n          </Grid>\n          <Grid\n            container\n            spacing={1}\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Melee Attack\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"If the target is in front of Baron Nashor within about melee range, he occasionally uses a Melee attack instead of a Ranged attack, dealing 100% AD physical damage to the target and 50% AD physical damage to nearby units.\"\n                        colourMap={{\n                          [mainColour.orange]: [\n                            \"100% AD physical damage\",\n                            \"50% AD physical damage\",\n                          ],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Ranged Attack\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"If the target is in front of Baron Nashor, he deals 100% AD physical damage to the target and applies two stack of Voracious Corrosion.\"\n                        colourMap={{\n                          [mainColour.orange]: [\"100% AD physical damage\"],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Single-target Rear Attack\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"If the target is behind Baron Nashor, he erects a spike that deals 100% AD physical damage to the target.\"\n                        colourMap={{\n                          [mainColour.orange]: [\"100% AD physical damage\"],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n          </Grid>\n\n          {/* ABILITIES INFO - PASSIVES*/}\n          <Grid>\n            <div\n              style={{\n                marginTop: 15,\n              }}\n            >\n              <Typography className=\"abilitiesTitleStyle\">Passives</Typography>\n            </div>\n          </Grid>\n          <Grid\n            container\n            spacing={1}\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Presence of the Baron\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"While Baron Nashor is alive, all obstructing Champion, Pets and Wards that are on top of him are pushed to a location in front of him. Baron Nashor is immune to Ghost effects (ghosted units cannot pass through him).\"\n                        colourMap={{\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Upon spawning, Baron Nashor knocks back all units that are within his collision radius.\"\n                        colourMap={{\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Debuff Immunity\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Immune to all forms of crowd control except stasis. Additionally, Baron Nashor's stats cannot be reduced by any means.\"\n                        colourMap={{\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Baron's Gaze\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Baron Nashor has 50% damage reduction from the unit that it has most recently basic attacked for 8s, reduced to 4.5s after Baron Nashor is slain.\"\n                        colourMap={{\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                          [mainColour.blue]: [\n                            \"50% damage reduction\",\n                            \"8s\",\n                            \"4.5s\",\n                          ],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Voracious Corrosion\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Reduces the target's armor and magic resistence by 0.5, stacking up to 100 times for a total of 50 maximum resistences reduction. Lasts for 8s, reduced to 4.5s after Baron Nashor is slain.\"\n                        colourMap={{\n                          [mainColour.blue]: [\n                            \"resistences\",\n                            \"resistence\",\n                            \"0.5\",\n                            \"100\",\n                            \"50\",\n                            \"8s\",\n                            \"4.5s\",\n                          ],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                          [mainColour.orange]: [\"armor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Void Corruption\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Basic attacks cause another burst of 60 (+ 20% AD) bonus magic damage that can occur every 0.75s. This attack targets the nearest champion with the lowest number of Voracious Corrosion stacks, applying another stack.\"\n                        colourMap={{\n                          [mainColour.blue]: [\n                            \"60 (+ 20% AD) bonus magic damage\",\n                            \"0.75s\",\n                          ],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n          </Grid>\n\n          {/* ABILITIES INFO - ACTIVES*/}\n          <Grid>\n            <div\n              style={{\n                marginTop: 15,\n              }}\n            >\n              <Typography className=\"abilitiesTitleStyle\">Actives</Typography>\n            </div>\n          </Grid>\n          <Grid\n            container\n            spacing={1}\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n          >\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Acid Pool\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"After winding up for 2s, Baron Nashor spits out 3 pools of acid in a cone in front of him, landing over 0.75s and dealing 10% AD magic damage to all champions upon impact as well as creating a field for 2.5s that slows by 50%.\"\n                        colourMap={{\n                          [mainColour.blue]: [\n                            \"0.75s\",\n                            \"magic damage\",\n                            \"2.5s\",\n                            \"50%\",\n                          ],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Acid Shot\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"After winding up for 2s, Baron Nashor spits acid down a straight line over 2s, dealing 20% AD magic damage to all units it hits.\"\n                        colourMap={{\n                          [mainColour.blue]: [\"2s\", \"magic damage\"],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                          [mainColour.orange]: [\"20% AD\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Tentacle Knockup\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Baron Nashor summons a tremor beneath the target's location that erupts with a tentacle after 1.25s, dealing 25% AD magic damage to units within and knocking them up for a duration based on their proximity to the areas center. Units near the area's edge are also slightly knocked away.\"\n                        colourMap={{\n                          [mainColour.blue]: [\"1.25s\", \"magic damage\"],\n                          [mainColour.purple]: [\"Baron Nashor\"],\n                          [mainColour.orange]: [\"25% AD\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n            <Grid item>\n              <div className=\"effectsStyles\">\n                <ImageAsset alt=\"unknown.svg\" />\n                <span style={{ paddingLeft: 20, paddingTop: 30 }}>\n                  <Typography className=\"abilitiesSubHeaderStyle\">\n                    Area-of-Effect Rear Attack\n                  </Typography>\n                  <ul style={{ margin: 0 }}>\n                    <li className=\"listStyles\">\n                      <TextColourizer\n                        text=\"Erects a cluster of spikes dealing 50% AD physical damage and stunning for 0.5s\"\n                        colourMap={{\n                          [mainColour.blue]: [\"50% AD physical damage\"],\n                          [mainColour.orange]: [\"0.5s\"],\n                        }}\n                      />\n                    </li>\n                  </ul>\n                </span>\n              </div>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        {/* Strategy */}\n        <Grid>\n          <Grid item style={{ paddingTop: 10 }}>\n            <ImageAsset alt=\"line.svg\" />\n          </Grid>\n          {/* STRATEGY HEADER */}\n          <Grid container>\n            <Grid item xs={9}>\n              <Typography className=\"infoHeaderText\">Strategy</Typography>\n            </Grid>\n            <Grid item>\n              <ImageAsset className={classes.closeArrow} alt=\"arrow.svg\" />\n            </Grid>\n          </Grid>\n\n          <Grid>\n            <ul style={{ margin: 10 }}>\n              <li className=\"listStyles\">\n                <Typography>\n                  Baron Nashor is a highly coveted objective that is difficult\n                  to fight without proper strength and personnel. A tank to\n                  endure the damage is almost always required, otherwise there\n                  are few champions that can battle the monster\n                  self-sufficiently, mainly utilizing immense sustainability and\n                  DPS.\n                </Typography>\n              </li>\n            </ul>\n          </Grid>\n        </Grid>\n\n        {/* TRIVIA */}\n        <Grid>\n          <Grid item style={{ paddingTop: 10 }}>\n            <ImageAsset alt=\"line.svg\" />\n          </Grid>\n          {/* TRIVIA HEADER */}\n          <Grid container>\n            <Grid item xs={9}>\n              <Typography className=\"infoHeaderText\">Trivia</Typography>\n            </Grid>\n            <Grid item>\n              <ImageAsset className={classes.closeArrow} alt=\"arrow.svg\" />\n            </Grid>\n          </Grid>\n          <Grid className=\"listStyles\">\n            <ul style={{ margin: 10 }}>\n              <li>\n                <Typography>\n                  During Snowdown Showdown 2012, players could earn a summoner\n                  icon featuring old Baron Nashor's main head with a santa hat\n                  on Baron Nashor's main head with a santa hat on.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  Nashor is an anagram for Roshan, being a tribute to the\n                  monster filling a similar role in Defense of the Ancients.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  A box labeled 'Baron Acid' can be seen in the preview video\n                  for the launch of the League of Legends' Mac Version.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  Old Baron Nashor's skull was placed within his modern\n                  counterpart's pit in patch V5.7.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  In the Death Recap screen, Voracious Corrosion is labeled as\n                  'WormAttack' and Wrath of the Ancients 'wrathdamage'.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  Voracious Corrosion old icon was recycled from Tabu's Soul\n                  Drain.\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  If Baron and Elder Dragon Elder Dragon had a duel, Baron\n                  Nashor will lose. Elder Dragon's HP regen is so high (250\n                  HP/s) that Baron can't even deal damage to him.\n                </Typography>\n              </li>\n            </ul>\n          </Grid>\n        </Grid>\n\n        {/* FOOTER */}\n        <Grid>\n          <Grid item style={{ paddingTop: 10 }}>\n            <ImageAsset alt=\"line.svg\" />\n          </Grid>\n\n          <StyledTabs\n            // value={value}\n            // onChange={handleChange}\n            indicatorColor=\"primary\"\n            centered\n          >\n            <Tab\n              disableRipple\n              label={\n                <Typography className={classes.footerText}>Overview</Typography>\n              }\n            />\n            <Tab\n              disableRipple\n              label={\n                <Typography className={classes.footerText}>Effects</Typography>\n              }\n            />\n            <Tab\n              disableRipple\n              label={\n                <Typography className={classes.footerText}>\n                  Abilities\n                </Typography>\n              }\n            />\n            <Tab\n              disableRipple\n              label={\n                <Typography className={classes.footerText}>Strategy</Typography>\n              }\n            />\n            <Tab\n              disableRipple\n              label={\n                <Typography className={classes.footerText}>Trivia</Typography>\n              }\n            />\n          </StyledTabs>\n\n          <Grid style={{ paddingTop: 30, textAlign: \"center\" }}>\n            <ImageAsset alt=\"ender.svg\" />\n          </Grid>\n        </Grid>\n      </Grid>\n    </MonsterWrapper>\n  );\n};\n","import { Typography, Grid, Collapse } from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { InfoHeader } from \"../layout/InfoHeader\";\nimport { ColouredList } from \"../layout/ColouredList\";\nimport { monsterDetailsConstants } from \"../styles/dimension\";\nimport { MonsterWrapper } from \"../components/InfoCardComponents (no longer used)/Baron\";\n\nexport const MonsterDetails: FC = () => {\n  const { selectedMonster } = useSelector((state: RootState) => state.monsters);\n  const { overview } = selectedMonster!;\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const healthCharacterCount = selectedMonster?.stats?.health.length ?? 0;\n  const attackCharacterCount = selectedMonster?.stats.attackDamage.length ?? 0;\n  const isOverCharLimit = healthCharacterCount > 12 ? true : false;\n  const firstColumnSize = isOverCharLimit ? 6 : 4;\n  const secondColumnSize = isOverCharLimit ? 3 : 3;\n  const thirdColumnSize = isOverCharLimit ? 3 : 2;\n  const secondColumnMarginLeft = healthCharacterCount > 12 ? 20 : 0;\n  const thirdColumnMarginLeft = attackCharacterCount > 5 ? 20 : 0;\n  const initialCharacterCount = selectedMonster?.location?.initial.length ?? 0;\n  const isOverInitialCharLimit = initialCharacterCount > 10 ? true : false;\n  const spawnColumnMarginLeft = isOverInitialCharLimit ? -40 : -30;\n  const spawnFirstColumnSize = isOverInitialCharLimit ? 7 : 4;\n  const spawnInitialMarginTop = isOverInitialCharLimit ? 6 : 0;\n  const initialTextMarginBottom = isOverInitialCharLimit ? 19 : 0;\n\n  const handleClick = () => {\n    setIsPanelOpen(!isPanelOpen);\n  };\n\n  return (\n    <MonsterWrapper>\n      <InfoHeader title=\"Overview\" handleArrowClick={handleClick} />\n      <Collapse in={isPanelOpen}>\n        <div className=\"overviewContainer\">\n          <ColouredList listItems={overview!} />\n        </div>\n        <Grid\n          container\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            marginTop: monsterDetailsConstants.statsMarginTop,\n            marginLeft: monsterDetailsConstants.statsMarginLeft,\n            marginBottom: monsterDetailsConstants.statsMarginBottom,\n          }}\n        >\n          {/* BOUNTY */}\n\n          <Grid item xs={3}>\n            <Typography className=\"overViewSubTextStyling\">Bounty</Typography>\n            <Grid style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <ImageAsset alt=\"line2.svg\" />\n              <Grid\n                container\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  marginLeft: monsterDetailsConstants.statsColumnMarginLeft,\n                }}\n              >\n                <Grid item>\n                  {/* Gold */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={2}>\n                      {/* Gold word */}\n                      <Typography className=\"greyText\"> Gold </Typography>\n                    </Grid>\n                    <Grid item xs={4} style={{ textAlign: \"center\" }}>\n                      {/* Gold icon */}\n                      <ImageAsset alt=\"gold.svg\" />\n                    </Grid>\n                    <Grid item xs={4}>\n                      {/* Gold value */}\n                      <Typography className=\"textColorStylingYellow\">\n                        {\" \"}\n                        {selectedMonster?.bounty?.gold}{\" \"}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  {/* EXP 1 */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={2}>\n                      {/* EXP word */}\n                      <Typography className=\"greyText\"> EXP </Typography>\n                    </Grid>\n                    <Grid item xs={4} style={{ textAlign: \"center\" }}>\n                      {/* EXP icon */}\n                      <ImageAsset alt=\"exp.svg\" />\n                    </Grid>\n                    <Grid item xs={4}>\n                      {/* EXP value */}\n                      <Typography> {selectedMonster?.bounty?.exp} </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  {/* CS */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={2}>\n                      {/* CS word */}\n                      <Typography className=\"greyText\"> CS </Typography>\n                    </Grid>\n                    <Grid item xs={4} style={{ textAlign: \"center\" }}>\n                      {/* CS icon */}\n                      <ImageAsset alt=\"cs.svg\" />\n                    </Grid>\n                    <Grid item xs={4}>\n                      {/* CS value */}\n                      <Typography> {selectedMonster?.bounty?.cs} </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          {/* STATISTICS */}\n          <Grid item xs={6}>\n            <Typography className=\"overViewSubTextStyling\">\n              Statistics\n            </Typography>\n            <Grid style={{ display: \"flex\", flexDirection: \"row\" }}>\n              <ImageAsset alt=\"line2.svg\" />\n              <Grid\n                container\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  marginLeft: monsterDetailsConstants.statsColumnMarginLeft,\n                }}\n              >\n                <Grid item>\n                  {/* STAT COL 1 */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={firstColumnSize}>\n                      {/* HP */}\n\n                      <Typography\n                        style={{ display: \"flex\", alignItems: \"center\" }}\n                      >\n                        {\" \"}\n                        <ImageAsset alt=\"heart.svg\" />\n                        <span className=\"textColorStylingGreen\">\n                          {selectedMonster?.stats?.health}\n                        </span>{\" \"}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={secondColumnSize}>\n                      {/* ATK */}\n\n                      <Typography\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          marginLeft: secondColumnMarginLeft,\n                        }}\n                      >\n                        <ImageAsset alt=\"physicaldamage.svg\" />{\" \"}\n                        <span className=\"textColorStylingOrange\">\n                          {\" \"}\n                          {selectedMonster?.stats.attackDamage}\n                        </span>{\" \"}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={thirdColumnSize}>\n                      {/* DEF */}\n\n                      <Typography\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          marginLeft: thirdColumnMarginLeft,\n                        }}\n                      >\n                        <ImageAsset alt=\"shield_orange.svg\" />\n                        <span className=\"textColorStylingOrange\">\n                          {\" \"}\n                          {selectedMonster?.stats.armor}{\" \"}\n                        </span>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  {/* STAT COL 2 */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={firstColumnSize}>\n                      {/* REGEN */}\n\n                      <Typography\n                        style={{ display: \"flex\", alignItems: \"center\" }}\n                      >\n                        <ImageAsset alt=\"hpregeneration.svg\" />{\" \"}\n                        <span className=\"textColorStylingGreen\">\n                          {selectedMonster?.stats.healthRegen || \"-\"}\n                        </span>{\" \"}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={secondColumnSize}>\n                      {/* ATK.SPD */}\n\n                      <Typography\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          marginLeft: secondColumnMarginLeft,\n                        }}\n                      >\n                        <ImageAsset alt=\"attackspd.svg\" />{\" \"}\n                        <span className=\"textColorStylingOrange\">\n                          {selectedMonster?.stats.attackSpeed}{\" \"}\n                        </span>{\" \"}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={thirdColumnSize}>\n                      {/* MR */}\n                      <Typography\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          marginLeft: thirdColumnMarginLeft,\n                        }}\n                      >\n                        <ImageAsset alt=\"shield_blue.svg\" />{\" \"}\n                        <span className=\"textColorStylingBlue\">\n                          {selectedMonster?.stats.magicResist}\n                        </span>{\" \"}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  {/* STAT COL 3 */}\n                  <Grid container className=\"bountyStyles\">\n                    <Grid item xs={firstColumnSize}>\n                      {/* SPEED */}\n                      <Typography\n                        style={{ display: \"flex\", alignItems: \"center\" }}\n                      >\n                        <ImageAsset alt=\"movement.svg\" />{\" \"}\n                        <span className=\"textColorStylingPurple\">\n                          {selectedMonster?.stats.movSpeed}\n                        </span>{\" \"}\n                      </Typography>{\" \"}\n                    </Grid>\n                    <Grid item xs={secondColumnSize}>\n                      {/* RANGE */}\n                      <Typography\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          marginLeft: secondColumnMarginLeft,\n                        }}\n                      >\n                        <ImageAsset alt=\"range.svg\" />{\" \"}\n                        <span className=\"textColorStylingWhite\">\n                          {selectedMonster?.stats.range}\n                        </span>{\" \"}\n                      </Typography>{\" \"}\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* SPAWN */}\n          <Grid item xs={3} style={{ marginLeft: spawnColumnMarginLeft }}>\n            <Typography className=\"overViewSubTextStyling\">Spawn</Typography>\n            <Grid style={{ display: \"flex\", flexDirection: \"row\" }}>\n              {\" \"}\n              <ImageAsset alt=\"line2.svg\" />\n              <Grid\n                container\n                className=\"bountyStyles\"\n                style={{\n                  marginLeft:\n                    monsterDetailsConstants.statsColumnItemsMarginLeft,\n                }}\n              >\n                <Grid\n                  container\n                  className=\"bountyStyles\"\n                  style={{ marginTop: spawnInitialMarginTop }}\n                >\n                  <Grid item xs={4}>\n                    <Typography\n                      className=\"greyText\"\n                      style={{ marginBottom: initialTextMarginBottom }}\n                    >\n                      Initial\n                    </Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={spawnFirstColumnSize}\n                    style={{\n                      marginLeft:\n                        monsterDetailsConstants.statsColumnItemsMarginLeft,\n                    }}\n                  >\n                    <Typography className=\"spawnInfo\">\n                      {selectedMonster?.location?.initial}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Grid container className=\"bountyStyles\">\n                  <Grid item xs={4}>\n                    <Typography className=\"greyText\">Respawn</Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={4}\n                    style={{\n                      marginLeft:\n                        monsterDetailsConstants.statsColumnItemsMarginLeft,\n                    }}\n                  >\n                    <Typography>\n                      {selectedMonster?.location?.respawn}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Collapse>\n    </MonsterWrapper>\n  );\n};\n","import { Grid } from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { MonsterDetails } from \"./MonsterDetails\";\nimport { Footer } from \"../layout/Footer\";\nimport { InfoHeader } from \"../layout/InfoHeader\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { InfoContainer } from \"../layout/InfoContainer\";\nimport { lineConstants } from \"../styles/dimension\";\nimport { Category } from \"../layout/layoutTypes\";\n\ninterface openStateType {\n  [key: string]: boolean;\n}\n\nexport const ModularMonsterCard: FC = () => {\n  const { selectedMonster } = useSelector((state: RootState) => state.monsters);\n  const [openState, setOpenState] = useState<openStateType>({});\n\n  const handleClick = (title?: string) => {\n    setOpenState({ ...openState, [title!]: !openState[title!] });\n  };\n\n  return (\n    <div>\n      <MonsterDetails />\n      <ImageAsset\n        style={{ marginLeft: lineConstants.marginLeft }}\n        alt=\"line.svg\"\n      />\n      <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n        {selectedMonster?.informationText?.map((section: Category) => {\n          return (\n            <>\n              <Grid item xs={12}>\n                <InfoHeader\n                  title={section.title}\n                  subtitle={section.subtitle}\n                  handleArrowClick={handleClick}\n                />\n                <Collapse in={!openState[section.title]}>\n                  <InfoContainer subcategories={section.subcategories} />\n                </Collapse>\n              </Grid>\n              <Grid\n                item\n                style={{\n                  marginTop: lineConstants.marginTop,\n                  marginLeft: lineConstants.marginLeft,\n                }}\n              >\n                <ImageAsset alt=\"line.svg\" />\n              </Grid>\n            </>\n          );\n        })}\n      </Grid>\n      <Footer />\n    </div>\n  );\n};\n","/* eslint-disable no-fallthrough */\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { ModularMonsterCard } from \"../monster-layout/ModularMonsterCard\";\nimport { mainColour } from \"../styles/palette\";\n\nconst Wrapper = styled.div`\n  .text {\n    background-color: transparent;\n    color: ${mainColour.white};\n  }\n`;\n\n// mini nav / tab thing\n\nexport const InfoCardPanel: FC = () => {\n  return (\n    <Wrapper>\n      <div className=\"text\">\n        <ModularMonsterCard />\n      </div>\n    </Wrapper>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { mainColour } from \"../styles/palette\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  PatchCategory,\n  PatchCategoryTypes,\n  PatchNote,\n  PatchRelease,\n} from \"../monster-layout/MonsterTypes\";\nimport { ImageAsset } from \"./ImageAsset\";\nimport { ColouredList } from \"../layout/ColouredList\";\nimport { patchNoteConstants } from \"../styles/dimension\";\nimport { TextColourizer } from \"../utils/TextColourizer\";\n\n// TODO: modify display of details, which is an array of strings\n\nconst Wrapper = styled.div`\n  .patchNotePanel {\n    color: ${mainColour.white};\n    display: flex;\n  }\n\n  .versionNumber {\n    color: ${mainColour.yellow};\n    font-weight: bold;\n    font-size: 24px;\n    line-height: 28px;\n    margin-top: ${patchNoteConstants.versionNumberMarginTop}px;\n  }\n\n  .abilityTitleStyles {\n    text-decoration: underline;\n    padding-right: 5px;\n    font-weight: bold;\n  }\n\n  .lineStyle {\n    margin-top: ${patchNoteConstants.lineMarginTop}px;\n  }\n`;\n\nconst patchCategoryColourMap: Record<\n  PatchCategoryTypes,\n  string\n> = Object.freeze({\n  \"REMOVED:\": mainColour.white,\n  \"NEW:\": mainColour.white,\n  \"BUG FIX:\": mainColour.white,\n  \"CHANGE:\": mainColour.white,\n  \"BUFF:\": mainColour.green,\n  \"NERF:\": mainColour.red,\n});\n\ninterface PatchNoteCardPanelProps {\n  patchNotes: PatchRelease[] | undefined;\n}\n\nexport const PatchNoteCardPanel: FC<PatchNoteCardPanelProps> = ({\n  patchNotes,\n}) => {\n  if (!patchNotes) return <></>;\n\n  return (\n    <Wrapper>\n      {patchNotes.map((patchRelease: PatchRelease, index: number) => (\n        <Grid container className=\"patchNotePanel\">\n          {/* Only display patch note if details array is not empty */}\n          {patchRelease.data.length > 0 && (\n            <Grid item style={{ marginLeft: patchNoteConstants.marginLeft }}>\n              {/* LINE SEPARATOR AND VERSION NUMBER */}\n              {/* If it is the first patch note, do not display line separator */}\n              {index === 0 ? (\n                <Typography className=\"versionNumber\">\n                  {patchRelease.release}\n                </Typography>\n              ) : (\n                <Grid item className=\"lineStyle\">\n                  <ImageAsset alt=\"patchNotesLineSeparator.svg\" />\n                  <Typography className=\"versionNumber\">\n                    {patchRelease.release}\n                  </Typography>\n                </Grid>\n              )}\n\n              {/* PATCH INFO */}\n              {patchRelease.data.map((patchCategory: PatchCategory) => {\n                return (\n                  <Grid\n                    container\n                    style={{\n                      display: \"flex\",\n                      marginLeft: patchNoteConstants.patchNoteListMarginLeft,\n                      marginTop: patchNoteConstants.patchNoteListMarginTop,\n                    }}\n                  >\n                    <Grid item xs={2} style={{ maxWidth: 100 }}>\n                      <Typography\n                        style={{\n                          color: patchCategoryColourMap[patchCategory.type],\n                        }}\n                      >\n                        {patchCategory.type}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={10}>\n                      {patchCategory.list.map((patchNote: PatchNote) => {\n                        return (\n                          <div>\n                            {/** SCENARIO 1: Ability exists and length of changes == 1 (underline ability and show change on same line) */}\n                            {patchNote.ability &&\n                              patchNote.changes.length === 1 && (\n                                <ul style={{ margin: 0, marginLeft: -20 }}>\n                                  <li>\n                                    <span>\n                                      <Typography\n                                        display=\"inline\"\n                                        noWrap\n                                        className=\"abilityTitleStyles\"\n                                      >\n                                        {patchNote.ability}\n                                      </Typography>\n                                      <TextColourizer\n                                        text={patchNote.changes[0].text}\n                                        colourMap={\n                                          patchNote.changes[0].colourMap\n                                        }\n                                      />\n                                    </span>\n                                  </li>\n                                </ul>\n                              )}\n                            {/** SCENARIO 2: Ability exists and length of list > 1 (show changes in a sublist) */}\n                            {patchNote.ability && patchNote.changes.length > 1 && (\n                              <ul style={{ margin: 0, marginLeft: -20 }}>\n                                <li>\n                                  <div>\n                                    <Typography className=\"abilityTitleStyles\">\n                                      {patchNote.ability}\n                                    </Typography>\n                                    <ColouredList\n                                      listItems={patchNote.changes}\n                                    />\n                                  </div>\n                                </li>\n                              </ul>\n                            )}\n                            {/** SCENARIO 3: No ability exists: always show a coloured list */}\n                            {!patchNote.ability && (\n                              <ColouredList listItems={patchNote.changes} />\n                            )}\n                          </div>\n                        );\n                      })}\n                    </Grid>\n                  </Grid>\n                );\n              })}\n            </Grid>\n          )}\n        </Grid>\n      ))}\n    </Wrapper>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { ImageAsset } from \"./ImageAsset\";\n\n// mini nav / tab thing\n\nexport const SplashArtCardPanel: FC = () => {\n  const { selectedMonster } = useSelector((state: RootState) => state.monsters);\n\n  return (\n    <div>\n      {selectedMonster?.splashArt.map((image) => (\n        <ImageAsset alt={image} style={{ maxWidth: '95%' }} />\n      ))}\n    </div>\n  );\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport { InfoCardPanel } from \"./InfoCardPanel\";\nimport { PatchNoteCardPanel } from \"./PatchNoteCardPanel\";\nimport { SplashArtCardPanel } from \"./SplashArtCardPanel\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { mainColour } from \"../styles/palette\";\nimport { ImageAsset } from \"./ImageAsset\";\nimport { infoCardTabsConstants } from \"../styles/dimension\";\nimport { useWindowDimensions } from \"./hooks/useWindowDimensions\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { useSelector } from \"react-redux\";\n\nconst StyledTabs = withStyles({\n  root: {\n    color: mainColour.white,\n    marginTop: infoCardTabsConstants.marginTop, // TODO: confirm that this is correct\n    marginLeft: infoCardTabsConstants.marginLeft, // added this so that information tabs align vertically with monster icon\n  },\n  indicator: {\n    height: 3,\n    background: `radial-gradient(\n      circle at bottom,\n      white -50%,\n      transparent 85%\n    );`,\n  },\n})(Tabs);\n\nconst Wrapper = styled.div`\n  .soulIconHover:hover {\n    color: ${mainColour.white};\n    background-color: rgba(255, 255, 255, 0.1);\n  }\n\n  .toggleButtonStyles {\n    color: ${mainColour.yellow};\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 15px;\n    display: flex;\n    align-items: center;\n  }\n\n  .check-rotate {\n    transform: rotate(45deg);\n  }\n\n  // added marginLeft so that line aligns with information tabs\n  .infoCardTabLine {\n    margin-top: ${infoCardTabsConstants.infoCardTabLineMarginTop}px;\n    margin-left: ${infoCardTabsConstants.infoCardTabLineMarginLeft}px;\n  }\n\n  .splashArt {\n    margin-top: ${infoCardTabsConstants.splashArtMarginTop}px;\n    margin-left: ${infoCardTabsConstants.splashArtMarginLeft}px;\n  }\n`;\n\nconst useStyles = makeStyles({\n  indicator: {\n    color: mainColour.blue,\n  },\n  root: {\n    color: mainColour.white,\n    fontFamily: \"Friz Quadrata\",\n  },\n  tabText: {\n    fontFamily: \"Friz Quadrata\",\n    fontSize: 20,\n    textTransform: \"none\",\n  },\n});\n// mini nav / tab thing\n\n// interface InfoCardTabsDetails {\n//   helloObject: string;\n// }\n\nexport const InfoCardTabs: FC = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [windowHeight, setWindowHeight] = useState(0);\n  const { height } = useWindowDimensions();\n  const { selectedMonster } = useSelector((state: RootState) => state.monsters);\n\n  useEffect(() => {\n    setWindowHeight(height - 255);\n  }, [height]);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Wrapper>\n      <StyledTabs\n        value={value}\n        onChange={handleChange}\n        indicatorColor=\"primary\" // underline\n        // textColor=\"secondary\" // this changes the selected text colour\n        // variant=\"fullWidth\"\n      >\n        {/* https://material-ui.com/api/tabs/ */}\n\n        <Tab\n          disableRipple\n          label={\n            <Typography className={classes.tabText}>Information</Typography>\n          }\n          disabled={false}\n        />\n        <Tab\n          disableRipple\n          label={\n            <Typography className={classes.tabText}>Patch Notes</Typography>\n          }\n          disabled={false}\n        />\n        <Tab\n          disableRipple\n          label={\n            <Typography className={classes.tabText}>Media</Typography>\n          }\n          disabled={false}\n        />\n      </StyledTabs>\n      {selectedMonster && (\n        <>\n          <div className=\"infoCardTabLine\">\n            <ImageAsset alt=\"line.svg\" />\n          </div>\n          <div\n            style={{\n              overflowY: \"scroll\",\n              overflowX: \"hidden\",\n              height: windowHeight,\n            }}\n          >\n            {value === 0 && (\n              <div>\n                <InfoCardPanel />\n              </div>\n            )}\n            {value === 1 && (\n              <div>\n                <PatchNoteCardPanel patchNotes={selectedMonster.patchNotes} />\n              </div>\n            )}\n            {value === 2 && (\n              <div className=\"splashArt\">\n                <SplashArtCardPanel />\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n","import React, { FC } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styled from \"styled-components\";\nimport { mainColour } from \"../styles/palette\";\n\nimport Fade from \"@material-ui/core/Fade\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { InfoCardTabs } from \"./InfoCardTabs\";\nimport { ImageAsset } from \"./ImageAsset\";\nimport { clearSelectedMonster } from \"../redux/actions/monsterActions\";\nimport { MonsterType } from \"../monster-layout/MonsterTypes\";\nimport { infoDrawerConstants } from \"../styles/dimension\";\n\nconst Wrapper = styled.div`\n  .soulIconHover:hover {\n    color: ${mainColour.white};\n    background-color: rgba(255, 255, 255, 0.1);\n  }\n\n  .toggleButtonStyles {\n    color: ${mainColour.yellow};\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 15px;\n    display: flex;\n    align-items: center;\n  }\n\n  .check-rotate {\n    transform: rotate(45deg);\n  }\n\n  .InfoDrawerStyle {\n    max-width: 100rem;\n    box-shadow: $shadow-8dp;\n    border: 0;\n    height: 100%;\n    z-index: 9990;\n  }\n\n  .monsterTitle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 30px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n    margin-bottom: ${infoDrawerConstants.monsterTitleMarginBottom}px;\n  }\n\n  .monsterSubtitle {\n    font-family: Friz Quadrata;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 15px;\n    display: flex;\n    align-items: center;\n    color: ${mainColour.grey};\n  }\n\n  .monsterIcon {\n    background-color: transparent;\n    margin-right: ${infoDrawerConstants.monsterIconMarginRight}px;\n  }\n`;\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    // width: \"auto\",\n  },\n  drawerStyle: {\n    zIndex: 9999,\n    color: mainColour.white,\n  },\n  infoCard: {\n    // width: 800,\n    // height: 500,\n    background: \"transparent\",\n    color: mainColour.white,\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: infoDrawerConstants.closeButtonMarginRight, // Figma says 20. Decreased to 15 to align with close arrows\n    \"&:hover\": {\n      cursor: \"pointer\",\n    },\n  },\n});\n\nexport interface InfoDrawerProps {\n  handleClose: Function;\n  showInfoDrawer: boolean;\n  asset: MonsterType | undefined;\n}\n\nexport const InfoDrawer: FC<InfoDrawerProps> = ({\n  handleClose,\n  showInfoDrawer,\n  asset,\n}) => {\n  const { selectedMonster } = useSelector((state: RootState) => state.monsters);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const handleCloseInfoDrawer = () => {\n    handleClose(asset);\n  };\n\n  return (\n    // <Drawer anchor=\"right\" open={showInfoDrawer} onClose={() => handleClose(false)}>\n    //   Hello\n    // </Drawer>\n\n    <Fade in={showInfoDrawer}>\n      <Wrapper>\n        <div style={{ marginLeft: infoDrawerConstants.marginLeft }}>\n          <Grid container style={{ display: \"flex\", flexDirection: \"column\" }}>\n            {/* ICON, MONSTER TITLE, MONSTER SUBTITLE, EXIT BUTTON */}\n            {/* https://css-tricks.com/snippets/css/a-guide-to-flexbox/  flex-direction: column*/}\n            <Grid item style={{ backgroundColor: \"transparent\" }}>\n              <Grid\n                container\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  marginLeft: infoDrawerConstants.marginLeft,\n                }}\n              >\n                {/* ICON */}\n                <Grid className=\"monsterIcon\">\n                  <ImageAsset\n                    height={60}\n                    width={60}\n                    alt={selectedMonster?.icon ?? \"\"}\n                  />{\" \"}\n                </Grid>\n                {/* MONSTER TITLE AND SUBTITLE */}\n                <Grid style={{ backgroundColor: \"transparent\" }}>\n                  <Typography className=\"monsterTitle\">\n                    {selectedMonster?.name}\n                  </Typography>\n                  <Typography className=\"monsterSubtitle\">\n                    Epic Monster\n                  </Typography>\n                </Grid>\n                {/* CLOSE BUTTON */}\n                <Grid item style={{ backgroundColor: \"transparent\" }}>\n                  <ImageAsset\n                    className={classes.closeButton}\n                    height={30}\n                    width={30}\n                    alt=\"close.svg\"\n                    onClick={() => {\n                      handleCloseInfoDrawer();\n                      dispatch(clearSelectedMonster());\n                    }}\n                  />{\" \"}\n                </Grid>\n              </Grid>\n            </Grid>\n            {/* EVERYTHING ELSE */}\n            <Grid\n              item\n              xs={12}\n              style={{\n                backgroundColor: \"transparent\",\n              }}\n            >\n              <InfoCardTabs />\n            </Grid>\n          </Grid>\n        </div>\n      </Wrapper>\n    </Fade>\n  );\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Card } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { ImageAsset } from \"./ImageAsset\";\n\nimport { mainColour, subColour } from \"../styles/palette\";\n\nconst Wrapper = styled.div`\n  .containerDonateImage {\n    position: relative;\n    text-align: center;\n  }\n\n  .bottomLeft {\n    position: absolute;\n    bottom: 8px;\n    left: 16px;\n  }\n\n  .donateText {\n    position: absolute;\n    top: 30px;\n    left: 36px;\n    font-family: Courier Prime; // TODO: import Courier Prime font\n    font-style: normal;\n    font-weight: normal;\n    font-size: 30px;\n    line-height: 34px;\n    display: flex;\n    text-align: left;\n    color: ${mainColour.white};\n  }\n\n  .linkContainer {\n    display: flex;\n    direction: row;\n    justify-content: center;\n    margin-top: 40px;\n  }\n\n  .linkTextStyles {\n    font-style: normal;\n    font-size: 16px;\n    font-weight: normal;\n    margin-top: 10px;\n    color: ${subColour.grey};\n  }\n\n  .linkHeaderTextStyles {\n    font-style: normal;\n    font-size: 20px;\n    font-weight: bold;\n    color: ${subColour.grey};\n  }\n\n  .socialLinksContainer {\n    margin-bottom: 34px;\n    margin-left: 60px;\n  }\n\n  .compliantDiv {\n    display: flex;\n    direction: row;\n    justify-content: center;\n    margin-top: 50px;\n  }\n\n  .compliantText {\n    font-style: normal;\n    font-weight: 500;\n    font-size: 20px;\n    line-height: 23px;\n    margin-left: 10px;\n    color: ${subColour.grey};\n  }\n`;\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: subColour.navy,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n});\n\nexport default function DonateInfoBox() {\n  const classes = useStyles();\n\n  return (\n    <Wrapper>\n      <Card\n        className={classes.root}\n        style={{ display: \"flex\", flexDirection: \"column\", margin: 5 }}\n      >\n        <div className=\"containerDonateImage\">\n          <Typography className=\"donateText\">\n            plz <br />\n            donate\n          </Typography>\n          <ImageAsset alt=\"cat.svg\" />\n          <a href=\"/\">\n            <ImageAsset alt=\"donate.svg\" className=\"bottomLeft\" />\n          </a>\n        </div>\n\n        <Grid container className=\"linkContainer\">\n          {/* COLUMN 1 */}\n          <Grid>\n            <Typography className=\"linkHeaderTextStyles\">One HP</Typography>\n            <Typography className=\"linkTextStyles\">About Us</Typography>\n            <Typography className=\"linkTextStyles\">\n              Advertise with Us\n            </Typography>\n            <Typography className=\"linkTextStyles\">Terms of Service</Typography>\n            <Typography className=\"linkTextStyles\">Privacy Policy</Typography>\n            <Typography className=\"linkTextStyles\">FAQ</Typography>\n          </Grid>\n          {/* COLUMN 2 */}\n          <Grid className=\"socialLinksContainer\">\n            <Typography className=\"linkHeaderTextStyles\">Social</Typography>\n            <Typography className=\"linkTextStyles\">Instagram</Typography>\n            <Typography className=\"linkTextStyles\">Facebook</Typography>\n            <Typography className=\"linkTextStyles\">Discord</Typography>\n            <Typography className=\"linkTextStyles\">Twitter</Typography>\n          </Grid>\n        </Grid>\n        {/* <div className=\"compliantDiv\">\n          <ImageAsset alt=\"compliance.svg\" />\n          <Typography className=\"compliantText\">\n            Riot Games Compliant\n          </Typography>\n        </div> */}\n      </Card>\n    </Wrapper>\n  );\n}\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport SummonerSearchBar from \"../components/SummonerSearchBar\";\nimport SummonersRiftMap from \"../components/SummonersRiftMap\";\n\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/ButtonGroup\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { mainColour, subColour } from \"../styles/palette\";\nimport { InfoDrawer } from \"../components/InfoDrawer\";\nimport DonateInfoBox from \"../components/DonateInfoBox\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { setSelectedMonster } from \"../redux/actions/monsterActions\";\nimport { ImageAsset } from \"../components/ImageAsset\";\nimport { MonsterType } from \"../monster-layout/MonsterTypes\";\nimport { useWindowDimensions } from \"../components/hooks/useWindowDimensions\";\nimport { setInfoDrawerBoolean } from \"../redux/actions/pageActions\";\nimport { SummonersRiftConstants } from \"../styles/dimension\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  .headerText {\n    color: ${mainColour.yellow};\n    font-family: \"Friz Quadrata\";\n    font-size: 20px;\n    line-height: 18px;\n  }\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // height: \"100%\",\n      // width: \"100%\",\n      overflowY: \"hidden\",\n      overflowX: \"hidden\",\n    },\n\n    paper: {\n      background: \"transparent\",\n    },\n\n    assetText: {\n      color: mainColour.white,\n      fontFamily: \"Friz Quadrata\",\n      fontSize: 16,\n    },\n\n    drawerStyle: {\n      // zIndex: 9999,\n      color: mainColour.white,\n    },\n\n    listItem: {\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n  })\n);\n\ninterface SummonersRiftProps {}\n\nconst ICON_SIZE = 40;\n\nexport interface MonsterObject {\n  name: string;\n  hp: number;\n  imageIcon: string;\n}\n\nexport const SummonersRift: FC<SummonersRiftProps> = ({}) => {\n  const dispatch = useDispatch();\n  const [windowHeight, setWindowHeight] = useState(0);\n  const { allMonsters } = useSelector((state: RootState) => state.monsters);\n  const { showInfoDrawer } = useSelector((state: RootState) => state.page);\n  const [asset, setAsset] = useState<MonsterType | undefined>(undefined);\n  const windowDimensions = useWindowDimensions();\n\n  const handleCloseInfoDrawer = () => {\n    dispatch(setInfoDrawerBoolean(false));\n  };\n\n  useEffect(() => {\n    setWindowHeight(windowDimensions.height - 85);\n  }, [windowDimensions]);\n\n  const classes = useStyles();\n  return (\n    <Wrapper>\n      <div style={{ maxHeight: windowHeight }}>\n        <Grid\n          container\n          className={classes.root}\n          justify=\"center\"\n          spacing={1}\n          style={{ margin: SummonersRiftConstants.marginTop }}\n        >\n          {/* MAP */}\n          <Grid item xs={5}>\n            <SummonersRiftMap />\n          </Grid>\n          {!showInfoDrawer ? (\n            <Grid item xs={7} style={{ maxWidth: \"55%\" }}>\n              <Grid\n                container\n                style={{\n                  marginLeft: SummonersRiftConstants.marginLeft,\n                  overflowY: \"scroll\",\n                  flexBasis: \"unset\",\n                  height: windowHeight - 30,\n                }}\n              >\n                {/* MONSTER LIST */}\n                <Grid item xs={7} style={{ maxWidth: \"50%\" }}>\n                  <SummonerSearchBar />\n                  <Typography\n                    style={{\n                      marginTop:\n                        SummonersRiftConstants.neutralMonstersHeaderMarginTop,\n                    }}\n                    className=\"headerText\"\n                  >\n                    Neutral Monsters\n                  </Typography>\n                  <ImageAsset width={460} alt=\"lineSeparator.svg\" />\n                  <Grid\n                    container\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      marginTop: SummonersRiftConstants.listMarginTop,\n                    }}\n                  >\n                    {/* NEUTRAL MONSTERS: COLUMN 1 */}\n                    <Grid item xs={6}>\n                      {allMonsters?.map((elem: MonsterType) => (\n                        <div>\n                          {allMonsters?.indexOf(elem) < 7 && (\n                            <Grid\n                              container\n                              style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                alignContent: \"center\",\n                                marginTop:\n                                  SummonersRiftConstants.iconAndTextMarginTop,\n                              }}\n                            >\n                              <Button\n                                onClick={() => {\n                                  // handleToggleInfoDrawer(elem);\n                                  dispatch(setSelectedMonster(elem.name));\n                                  dispatch(setInfoDrawerBoolean(true));\n                                }}\n                              >\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                  }}\n                                  className={classes.listItem}\n                                >\n                                  <ImageAsset\n                                    className=\"\"\n                                    height={ICON_SIZE}\n                                    width={ICON_SIZE}\n                                    alt={elem.icon}\n                                  />{\" \"}\n                                  <p\n                                    className={classes.assetText}\n                                    style={{\n                                      marginLeft:\n                                        SummonersRiftConstants.iconMarginLeft,\n                                    }}\n                                  >\n                                    {elem.name}\n                                  </p>\n                                </div>\n                              </Button>\n                            </Grid>\n                          )}\n                        </div>\n                      ))}\n                    </Grid>\n                    {/* NEUTRAL MONSTERS: COLUMN 2 */}\n                    <Grid item xs={6}>\n                      {allMonsters?.map((elem: MonsterType) => (\n                        <div>\n                          {allMonsters?.indexOf(elem) > 6 && (\n                            <Grid\n                              container\n                              style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                alignContent: \"center\",\n                                marginTop:\n                                  SummonersRiftConstants.iconAndTextMarginTop,\n                              }}\n                            >\n                              <Button\n                                onClick={() => {\n                                  // handleToggleInfoDrawer(elem);\n                                  dispatch(setSelectedMonster(elem.name));\n                                  dispatch(setInfoDrawerBoolean(true));\n                                }}\n                              >\n                                <div\n                                  style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                  }}\n                                  className={classes.listItem}\n                                >\n                                  <ImageAsset\n                                    className=\"\"\n                                    height={ICON_SIZE}\n                                    width={ICON_SIZE}\n                                    alt={elem.icon}\n                                  />{\" \"}\n                                  <p\n                                    className={classes.assetText}\n                                    style={{\n                                      marginLeft:\n                                        SummonersRiftConstants.iconMarginLeft,\n                                    }}\n                                  >\n                                    {elem.name}\n                                  </p>\n                                </div>\n                              </Button>\n                            </Grid>\n                          )}\n                        </div>\n                      ))}\n                    </Grid>\n                  </Grid>\n                  <Typography\n                    style={{\n                      marginTop:\n                        SummonersRiftConstants.neutralMonstersHeaderMarginTop,\n                    }}\n                    className=\"headerText\"\n                  >\n                    Minions\n                  </Typography>\n                  <ImageAsset width={460} alt=\"lineSeparator.svg\" />\n                  <Grid\n                    container\n                    style={{ display: \"flex\", flexDirection: \"row\" }}\n                  >\n                    {/* MINIONS: COLUMN 1 */}\n                    <Grid item xs={6}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          marginTop: SummonersRiftConstants.listMarginTop,\n                        }}\n                      >\n                        <ImageAsset alt=\"superminion.svg\" />\n                        <p\n                          className={classes.assetText}\n                          style={{\n                            marginLeft: SummonersRiftConstants.iconMarginLeft,\n                          }}\n                        >\n                          Super Minions\n                        </p>\n                      </div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                        }}\n                      >\n                        <ImageAsset alt=\"meleeminion.svg\" />\n                        <p\n                          className={classes.assetText}\n                          style={{\n                            marginLeft: SummonersRiftConstants.iconMarginLeft,\n                          }}\n                        >\n                          Melee Minions\n                        </p>\n                      </div>\n                      {/* {[1, 1].map(() => (\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            marginTop: 10,\n                          }}\n                        >\n                          <img\n                            className=\"\"\n                            src={baronIcon}\n                            height={ICON_SIZE}\n                            style={{ marginRight: 5 }}\n                            alt=\"baronIcon\"\n                          />{\" \"}\n                          <p\n                            className={classes.assetText}\n                            style={{ marginLeft: 10 }}\n                          >\n                            Baron Nashor\n                          </p>\n                        </div>\n                      ))} */}\n                    </Grid>\n                    {/* COLUMN 2 */}\n                    <Grid item xs={6}>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          marginTop: SummonersRiftConstants.listMarginTop,\n                        }}\n                      >\n                        <ImageAsset alt=\"canonminion.svg\" />\n                        <p\n                          className={classes.assetText}\n                          style={{\n                            marginLeft: SummonersRiftConstants.iconMarginLeft,\n                          }}\n                        >\n                          Cannon Minions\n                        </p>\n                      </div>\n                      <div\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"row\",\n                          marginTop:\n                            SummonersRiftConstants.iconAndTextMarginTop,\n                        }}\n                      >\n                        <ImageAsset alt=\"casterminion.svg\" />\n                        <p\n                          className={classes.assetText}\n                          style={{\n                            marginLeft: SummonersRiftConstants.iconMarginLeft,\n                          }}\n                        >\n                          Caster Minions\n                        </p>\n                      </div>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    container\n                    style={{ display: \"flex\", flexDirection: \"row\" }}\n                  >\n                    <Grid\n                      container\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        marginTop:\n                          SummonersRiftConstants.neutralMonstersHeaderMarginTop,\n                      }}\n                    >\n                      {/* JUNGLE PLANTS*/}\n                      <Grid item xs={6}>\n                        <Typography className=\"headerText\">\n                          Jungle Plants\n                        </Typography>\n                        <ImageAsset width={220} alt=\"lineSeparatorShort.svg\" />\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            marginTop: SummonersRiftConstants.listMarginTop,\n                          }}\n                        >\n                          <ImageAsset alt=\"blastcone.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Blast Cone\n                          </p>\n                        </div>\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                          }}\n                        >\n                          <ImageAsset alt=\"honeyfruit.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Honey Fruit\n                          </p>\n                        </div>\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                          }}\n                        >\n                          <ImageAsset alt=\"scryersbloom.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Scryer's Bloom\n                          </p>\n                        </div>\n                      </Grid>\n                      {/* BUILDINGS */}\n                      <Grid item xs={6}>\n                        <Typography className=\"headerText\">\n                          Buildings\n                        </Typography>\n                        <ImageAsset width={220} alt=\"lineSeparatorShort.svg\" />\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            marginTop: SummonersRiftConstants.listMarginTop,\n                          }}\n                        >\n                          <ImageAsset alt=\"turret.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Turrets\n                          </p>\n                        </div>\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                          }}\n                        >\n                          <ImageAsset alt=\"inhibitor.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Inhibitors\n                          </p>\n                        </div>\n                        <div\n                          style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                          }}\n                        >\n                          <ImageAsset alt=\"nexus.svg\" />\n                          <p\n                            className={classes.assetText}\n                            style={{\n                              marginLeft: SummonersRiftConstants.iconMarginLeft,\n                            }}\n                          >\n                            Nexus\n                          </p>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                {/* BIG ANNOYING AD */}\n                <Grid item xs={5} style={{ backgroundColor: subColour.navy }}>\n                  <DonateInfoBox />\n                </Grid>\n              </Grid>\n            </Grid>\n          ) : (\n            <Grid\n              item\n              xs={7}\n              style={{\n                background: `transparent`,\n                maxWidth: '55%'\n              }}\n            >\n              <InfoDrawer\n                showInfoDrawer={showInfoDrawer}\n                handleClose={handleCloseInfoDrawer}\n                asset={asset}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </div>\n    </Wrapper>\n  );\n};\n","import React, { FC } from \"react\";\n\ninterface WatchLiveProps {}\n\nexport const WatchLive: FC<WatchLiveProps> = ({}) => {\n  return <h1>Watch Live</h1>;\n};\n","import React, { FC } from \"react\";\n\ninterface LeaderboardProps {}\n\nexport const Leaderboard: FC<LeaderboardProps> = ({}) => {\n  return <h1>Leaderboard</h1>;\n};\n","import React, { FC } from \"react\";\n\ninterface StatsProps {}\n\nexport const Stats: FC<StatsProps> = ({}) => {\n  return <h1>Stats</h1>;\n};\n","import React, { FC } from \"react\";\n\ninterface GuideProps {}\n\nexport const Guides: FC<GuideProps> = ({}) => {\n  return <h1>Guides</h1>;\n};\n","import {\n  createStyles,\n  Dialog,\n  Grid,\n  GridListTileBar,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport React, { FC, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { RootState } from \"../redux/ReduxTypes\";\nimport { mainColour } from \"../styles/palette\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { vscDarkPlus } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { ImageAsset } from \"./ImageAsset\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { useWindowDimensions } from \"./hooks/useWindowDimensions\";\n\nconst Wrapper = styled.div`\n  .containerStyles {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 100px;\n  }\n\n  .gridCell {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n  }\n\n  .gridCell:hover {\n    cursor: pointer;\n    filter: drop-shadow(3px 3px 3px grey);\n  }\n`;\n\ninterface ImageProps {\n  imageKey: string;\n  url: string;\n}\n\ninterface ImageDialogProps {\n  imageKey: string;\n  url: string;\n  isOpen: boolean;\n  setOpen: Function;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      backgroundColor: mainColour.bgBlack,\n      alignItems: \"center\",\n      width: 500,\n      height: 30,\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      color: \"white\",\n      flex: 1,\n    },\n    iconButton: {\n      color: \"white\",\n      padding: 10,\n    },\n    divider: {\n      height: 20,\n      margin: 4,\n      backgroundColor: mainColour.white,\n    },\n  })\n);\n\nexport const ImageGallery: FC = ({}) => {\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false);\n  const [searchState, setSearchState] = useState(\"\");\n  const [dialogProps, setDialogProps] = useState<ImageProps>({\n    imageKey: \"\",\n    url: \"\",\n  });\n  const { imageList } = useSelector((state: RootState) => state.images);\n  const classes = useStyles();\n  const { height } = useWindowDimensions();\n\n  const handleClick = (imageKey: string, url: string) => {\n    setDialogProps({ imageKey, url });\n    setIsDialogOpen(true);\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setSearchState(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <Grid container style={{ margin: 20 }} className=\"containerStyles\">\n        <Grid item xs={12}>\n          <h2>Image Gallery (dev mode only)</h2>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <div style={{ paddingTop: 10 }}>\n            <Paper component=\"form\" className={classes.root}>\n              <div className={classes.iconButton} aria-label=\"menu\">\n                <SearchIcon />\n              </div>\n              <Divider className={classes.divider} orientation=\"vertical\" />\n              <InputBase\n                className={classes.input}\n                onChange={handleChange}\n                onKeyDown={(e) => e.key === \"Enter\" && e.preventDefault()}\n                placeholder=\"Search images\"\n                inputProps={{ \"aria-label\": \"search images\" }}\n              />\n            </Paper>\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\",\n            overflowY: \"scroll\",\n            height: height - 250,\n          }}\n        >\n          <GridList cellHeight={150} cols={8} style={{ width: \"70%\" }}>\n            {imageList\n              ?.filter((e) => e.key.includes(searchState))\n              .map((image) => (\n                <GridListTile key={image.key}>\n                  <div\n                    className=\"gridCell\"\n                    onClick={() => handleClick(image.key, image.url)}\n                  >\n                    <img src={image.url} alt={image.key} loading=\"lazy\" />\n                  </div>\n                  <GridListTileBar title={image.key} />\n                </GridListTile>\n              ))}\n          </GridList>\n        </div>\n      </Grid>\n      <ImageDialog\n        imageKey={dialogProps.imageKey}\n        url={dialogProps.url}\n        isOpen={isDialogOpen}\n        setOpen={setIsDialogOpen}\n      />\n    </Wrapper>\n  );\n};\n\nconst ImageDialog: FC<ImageDialogProps> = ({\n  imageKey,\n  url,\n  isOpen,\n  setOpen,\n}) => {\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    if (url) {\n      getMetaData(url);\n    }\n  }, [url]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const getMetaData = (imageUrl: string) => {\n    const img = new Image();\n    img.src = imageUrl;\n    img.onload = () => setDimensions({ width: img.width, height: img.height });\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      open={isOpen}\n      PaperProps={{\n        style: {\n          color: mainColour.white,\n          backgroundColor: mainColour.black,\n          textAlign: \"center\",\n          minWidth: 725,\n        },\n      }}\n    >\n      <DialogContent>\n        <Typography variant=\"h5\" style={{ marginBottom: 20 }}>\n          {imageKey}\n        </Typography>\n        <ImageAsset\n          alt={imageKey}\n          style={{\n            minHeight: 120,\n            maxHeight: 600,\n            marginBottom: 20,\n            maxWidth: \"100%\",\n          }}\n        />\n        <Typography>\n          <b>Source:</b>{\" \"}\n          <a\n            href={url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            style={{ color: \"inherit\" }}\n          >\n            <u>{url}</u>\n          </a>\n        </Typography>\n        <Typography>\n          <b>Original dimensions:</b>{\" \"}\n          {`${dimensions.width} x ${dimensions.height}`}\n        </Typography>\n        <br />\n        <Typography style={{ textAlign: \"left\" }}>The quickie:</Typography>\n        <SyntaxHighlighter language=\"html\" style={vscDarkPlus} wrapLongLines>\n          {`<img src=\"${url}\" alt=\"${imageKey}\" />`}\n        </SyntaxHighlighter>\n        <br />\n        <Typography style={{ textAlign: \"left\" }}>\n          Or, if you have the ImageAsset component imported (preferred):\n        </Typography>\n        <SyntaxHighlighter language=\"typescript\" style={vscDarkPlus}>\n          {`// make sure you have imported the components/ImageAsset component! (eg)\\nimport { ImageAsset } from '{relative_file_path}/ImageAsset';\\n\\n// include this line in the render method\\n<ImageAsset alt='${imageKey}'/>`}\n        </SyntaxHighlighter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","export const prodMode = {\n    \"default\": false,\n    \"home\": false,\n    \"watchlive\": false,\n    \"leaderboards\": false, \n    \"stats\": false,\n    \"guides\": false,\n    \"summonersrift\": true,\n    \"wiki\": false,\n    \"image_gallery\": false,\n}\n\n// if (process.env.PRODUCTION) {...}","import React, { FC } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar\";\nimport { Test } from \"./components/Test\";\n\nimport { Wiki } from \"./pages/Wiki\";\nimport { Home } from \"./pages/Home\";\nimport { RiftMap } from \"./pages/RiftMap\";\nimport { SummonersRift } from \"./pages/SummonersRift\";\nimport { WatchLive } from \"./pages/WatchLive\";\nimport { Leaderboard } from \"./pages/Leaderboard\";\nimport { Stats } from \"./pages/Stats\";\nimport { Guides } from \"./pages/Guides\";\nimport { ImageGallery } from \"./components/ImageGallery\";\nimport { prodMode } from \"../src/config/featureFlags\";\n\nexport const Routes: FC = () => {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          component={prodMode.default ? Test : SummonersRift}\n        />\n        <Route\n          path=\"/test\"\n          component={prodMode.default ? Test : SummonersRift}\n        />\n        <Route path=\"/home\" component={prodMode.home ? Home : SummonersRift} />\n        <Route\n          path=\"/watchlive\"\n          component={prodMode.watchlive ? WatchLive : SummonersRift}\n        />\n        <Route\n          path=\"/leaderboards\"\n          component={prodMode.leaderboards ? Leaderboard : SummonersRift}\n        />\n        <Route\n          path=\"/stats\"\n          component={prodMode.stats ? Stats : SummonersRift}\n        />\n        <Route\n          path=\"/guides\"\n          component={prodMode.guides ? Guides : SummonersRift}\n        />\n        <Route\n          path=\"/summonersrift\"\n          component={prodMode.summonersrift ? SummonersRift : SummonersRift}\n        />\n        <Route path=\"/wiki\" component={prodMode.wiki ? Wiki : SummonersRift} />\n        <Route\n          path=\"/image_gallery\"\n          component={prodMode.image_gallery ? ImageGallery : SummonersRift}\n        />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setDragOptions, setSelectedDrag } from \"./redux/actions/dragonActions\";\nimport { fetchImageUrls } from \"./redux/actions/imageActions\";\nimport { fetchAllMonsters } from \"./redux/actions/monsterActions\";\nimport { Routes } from \"./Routes\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    Promise.all([\n      dispatch(fetchAllMonsters()),\n      dispatch(fetchImageUrls()),\n      dispatch(setSelectedDrag(\"cloud\")),\n      dispatch(\n        setDragOptions({\n          showNeutralMonsters: true,\n          showBuildings: true,\n          showJunglePlants: false,\n          showBrushes: false,\n        })\n      ),\n    ]);\n  }, [dispatch]);\n\n  return <Routes />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-anonymous-default-export */\nimport page from \"./reducers/pageReducer\";\nimport dragon from \"./reducers/dragonReducer\";\nimport images from \"./reducers/imageReducer\";\nimport monsters from \"./reducers/monsterReducer\";\n\nexport default {\n  page,\n  dragon,\n  images,\n  monsters,\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { SET_CURRENT_PAGE, SET_SHOW_INFO_DRAWER } from \"../actions/pageActions\";\n\ninterface PageAction {\n  type: string;\n  payload: string;\n}\n\nexport default (state = {\n  currentPage: \"/\",\n  showInfoDrawer: false\n}, action: PageAction) => {\n  switch (action.type) {\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload,\n      };\n      case SET_SHOW_INFO_DRAWER:\n        return {\n          ...state,\n          showInfoDrawer: action.payload,\n        };\n    default:\n      return state;\n  }\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport {\n  SET_DRAG_OPTIONS,\n  SET_SELECTED_DRAGON,\n} from \"../actions/dragonActions\";\n\ninterface DragonAction {\n  type: string;\n  payload: string;\n}\n\nexport default (state = {}, action: DragonAction) => {\n  switch (action.type) {\n    case SET_SELECTED_DRAGON:\n      return {\n        ...state,\n        selectedDragon: action.payload,\n      };\n    case SET_DRAG_OPTIONS:\n      return {\n        ...state,\n        dragOptions: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport {\n  FETCHING_IMAGES,\n  FETCHING_IMAGES_FAILED,\n  SET_IMAGES,\n  SET_IMAGE_MAP,\n} from \"../actions/imageActions\";\n\ninterface ImageAction {\n  type: string;\n  payload: any;\n}\n\nexport default (state = {}, action: ImageAction) => {\n  switch (action.type) {\n    case FETCHING_IMAGES:\n      return {\n        ...state,\n        fetchingImages: action.payload,\n      };\n    case SET_IMAGES:\n      return {\n        ...state,\n        imageList: action.payload,\n      };\n    case SET_IMAGE_MAP:\n      return {\n        ...state,\n        imageMap: action.payload\n      }\n    case FETCHING_IMAGES_FAILED:\n      return {\n        ...state,\n        fetchFailed: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport { MonsterType } from \"../../monster-layout/MonsterTypes\";\nimport {\n  FETCHING_ALL_MONSTERS,\n  SET_ALL_MONSTERS,\n  SET_SELECTED_MONSTER,\n  FETCHING_MONSTERS_FAILED,\n  CLEAR_SELECTED_MONSTER,\n} from \"../actions/monsterActions\";\nimport { MonsterState } from \"../ReduxTypes\";\n\ninterface MonsterAction {\n  type: string;\n  payload: MonsterType | Array<MonsterType> | boolean | undefined;\n}\n\nexport default (\n  state: MonsterState = {\n    fetchingMonsters: false,\n    allMonsters: [],\n    selectedMonster: undefined,\n    fetchFailed: false,\n  },\n  action: MonsterAction\n) => {\n  switch (action.type) {\n    case FETCHING_ALL_MONSTERS:\n      return {\n        ...state,\n        fetchingMonsters: action.payload,\n      };\n    case SET_ALL_MONSTERS:\n      return {\n        ...state,\n        allMonsters: action.payload,\n      };\n    case SET_SELECTED_MONSTER:\n      return {\n        ...state,\n        selectedMonster: action.payload,\n      };\n    case CLEAR_SELECTED_MONSTER:\n      return {\n        ...state,\n        selectedMonster: undefined,\n      };\n    case FETCHING_MONSTERS_FAILED:\n      return {\n        ...state,\n        fetchFailed: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\n\nexport const store = createStore(\n  combineReducers({ ...reducers }),\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./redux/configureStore\";\nimport { Provider } from \"react-redux\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#FFFFFF\",\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}